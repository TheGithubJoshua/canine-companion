{"version":3,"file":"urql-core-chunk.mjs","sources":["../src/utils/error.ts","../src/utils/hash.ts","../src/utils/variables.ts","../src/utils/request.ts","../src/utils/result.ts","../src/internal/fetchOptions.ts","../src/internal/fetchSource.ts"],"sourcesContent":["import { GraphQLError } from '@0no-co/graphql.web';\nimport { ErrorLike } from '../types';\n\nconst generateErrorMessage = (\n  networkErr?: Error,\n  graphQlErrs?: GraphQLError[]\n) => {\n  let error = '';\n  if (networkErr) return `[Network] ${networkErr.message}`;\n  if (graphQlErrs) {\n    for (const err of graphQlErrs) {\n      if (error) error += '\\n';\n      error += `[GraphQL] ${err.message}`;\n    }\n  }\n  return error;\n};\n\nconst rehydrateGraphQlError = (error: any): GraphQLError => {\n  if (\n    error &&\n    error.message &&\n    (error.extensions || error.name === 'GraphQLError')\n  ) {\n    return error;\n  } else if (typeof error === 'object' && error.message) {\n    return new GraphQLError(\n      error.message,\n      error.nodes,\n      error.source,\n      error.positions,\n      error.path,\n      error,\n      error.extensions || {}\n    );\n  } else {\n    return new GraphQLError(error as any);\n  }\n};\n\n/** An abstracted `Error` that provides either a `networkError` or `graphQLErrors`.\n *\n * @remarks\n * During a GraphQL request, either the request can fail entirely, causing a network error,\n * or the GraphQL execution or fields can fail, which will cause an {@link ExecutionResult}\n * to contain an array of GraphQL errors.\n *\n * The `CombinedError` abstracts and normalizes both failure cases. When {@link OperationResult.error}\n * is set to this error, the `CombinedError` abstracts all errors, making it easier to handle only\n * a subset of error cases.\n *\n * @see {@link https://urql.dev/goto/docs/basics/errors} for more information on handling\n * GraphQL errors and the `CombinedError`.\n */\nexport class CombinedError extends Error {\n  public name: string;\n  public message: string;\n\n  /** A list of GraphQL errors rehydrated from a {@link ExecutionResult}.\n   *\n   * @remarks\n   * If an {@link ExecutionResult} received from the API contains a list of errors,\n   * the `CombinedError` will rehydrate them, normalize them to\n   * {@link GraphQLError | GraphQLErrors} and list them here.\n   * An empty list indicates that no GraphQL error has been sent by the API.\n   */\n  public graphQLErrors: GraphQLError[];\n\n  /** Set to an error, if a GraphQL request has failed outright.\n   *\n   * @remarks\n   * A GraphQL over HTTP request may fail and not reach the API. Any error that\n   * prevents a GraphQl request outright, will be considered a “network error” and\n   * set here.\n   */\n  public networkError?: Error;\n\n  /** Set to the {@link Response} object a fetch exchange received.\n   *\n   * @remarks\n   * If a built-in fetch {@link Exchange} is used in `urql`, this may\n   * be set to the {@link Response} object of the Fetch API response.\n   * However, since `urql` doesn’t assume that all users will use HTTP\n   * as the only or exclusive transport for GraphQL this property is\n   * neither typed nor guaranteed and may be re-used for other purposes\n   * by non-fetch exchanges.\n   *\n   * Hint: It can be useful to use `response.status` here, however, if\n   * you plan on relying on this being a {@link Response} in your app,\n   * which it is by default, then make sure you add some extra checks\n   * before blindly assuming so!\n   */\n  public response?: any;\n\n  constructor(input: {\n    networkError?: Error;\n    graphQLErrors?: Array<string | ErrorLike>;\n    response?: any;\n  }) {\n    const normalizedGraphQLErrors = (input.graphQLErrors || []).map(\n      rehydrateGraphQlError\n    );\n    const message = generateErrorMessage(\n      input.networkError,\n      normalizedGraphQLErrors\n    );\n\n    super(message);\n\n    this.name = 'CombinedError';\n    this.message = message;\n    this.graphQLErrors = normalizedGraphQLErrors;\n    this.networkError = input.networkError;\n    this.response = input.response;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n","/** A hash value as computed by {@link phash}.\n *\n * @remarks\n * Typically `HashValue`s are used as hashes and keys of GraphQL documents,\n * variables, and combined, for GraphQL requests.\n */\nexport type HashValue = number & {\n  /** Marker to indicate that a `HashValue` may not be created by a user.\n   *\n   * @remarks\n   * `HashValue`s are created by {@link phash} and are marked as such to not mix them\n   * up with other numbers and prevent them from being created or used outside of this\n   * hashing function.\n   *\n   * @internal\n   */\n  readonly _opaque: unique symbol;\n};\n\n/** Computes a djb2 hash of the given string.\n *\n * @param x - the string to be hashed\n * @param seed - optionally a prior hash for progressive hashing\n * @returns a hash value, i.e. a number\n *\n * @remark\n * This is the hashing function used throughout `urql`, primarily to compute\n * {@link Operation.key}.\n *\n * @see {@link http://www.cse.yorku.ca/~oz/hash.html#djb2} for a further description of djb2.\n */\nexport const phash = (x: string, seed?: HashValue): HashValue => {\n  let h = (seed || 5381) | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++)\n    h = (h << 5) + h + x.charCodeAt(i);\n  return h as HashValue;\n};\n","export type FileMap = Map<string, File | Blob>;\n\nconst seen = new Set();\nconst cache = new WeakMap();\n\nconst stringify = (x: any): string => {\n  if (x === null || seen.has(x)) {\n    return 'null';\n  } else if (typeof x !== 'object') {\n    return JSON.stringify(x) || '';\n  } else if (x.toJSON) {\n    return stringify(x.toJSON());\n  } else if (Array.isArray(x)) {\n    let out = '[';\n    for (const value of x) {\n      if (out.length > 1) out += ',';\n      out += stringify(value) || 'null';\n    }\n    out += ']';\n    return out;\n  }\n\n  const keys = Object.keys(x).sort();\n  if (!keys.length && x.constructor && x.constructor !== Object) {\n    const key = cache.get(x) || Math.random().toString(36).slice(2);\n    cache.set(x, key);\n    return stringify({ __key: key });\n  }\n\n  seen.add(x);\n  let out = '{';\n  for (const key of keys) {\n    const value = stringify(x[key]);\n    if (value) {\n      if (out.length > 1) out += ',';\n      out += stringify(key) + ':' + value;\n    }\n  }\n\n  seen.delete(x);\n  out += '}';\n  return out;\n};\n\nconst extract = (map: FileMap, path: string, x: any) => {\n  if (x == null || typeof x !== 'object' || x.toJSON || seen.has(x)) {\n    /*noop*/\n  } else if (Array.isArray(x)) {\n    for (let i = 0, l = x.length; i < l; i++)\n      extract(map, `${path}.${i}`, x[i]);\n  } else if (x instanceof FileConstructor || x instanceof BlobConstructor) {\n    map.set(path, x as File | Blob);\n  } else {\n    seen.add(x);\n    for (const key of Object.keys(x)) extract(map, `${path}.${key}`, x[key]);\n  }\n};\n\n/** A stable stringifier for GraphQL variables objects.\n *\n * @param x - any JSON-like data.\n * @return A JSON string.\n *\n * @remarks\n * This utility creates a stable JSON string from any passed data,\n * and protects itself from throwing.\n *\n * The JSON string is stable insofar as objects’ keys are sorted,\n * and instances of non-plain objects are replaced with random keys\n * replacing their values, which remain stable for the objects’\n * instance.\n */\nexport const stringifyVariables = (x: any): string => {\n  seen.clear();\n  return stringify(x);\n};\n\nclass NoopConstructor {}\nconst FileConstructor = typeof File !== 'undefined' ? File : NoopConstructor;\nconst BlobConstructor = typeof Blob !== 'undefined' ? Blob : NoopConstructor;\n\nexport const extractFiles = (x: any): FileMap => {\n  const map: FileMap = new Map();\n  if (\n    FileConstructor !== NoopConstructor ||\n    BlobConstructor !== NoopConstructor\n  ) {\n    seen.clear();\n    extract(map, 'variables', x);\n  }\n  return map;\n};\n","import { Kind, parse, print } from '@0no-co/graphql.web';\nimport type { DocumentNode, DefinitionNode } from './graphql';\nimport { HashValue, phash } from './hash';\nimport { stringifyVariables } from './variables';\n\nimport type {\n  DocumentInput,\n  TypedDocumentNode,\n  AnyVariables,\n  GraphQLRequest,\n  RequestExtensions,\n} from '../types';\n\n/** A `DocumentNode` annotated with its hashed key.\n * @internal\n */\nexport type KeyedDocumentNode = TypedDocumentNode & {\n  __key: HashValue;\n};\n\nconst SOURCE_NAME = 'gql';\nconst GRAPHQL_STRING_RE = /(\"{3}[\\s\\S]*\"{3}|\"(?:\\\\.|[^\"])*\")/g;\nconst REPLACE_CHAR_RE = /(?:#[^\\n\\r]+)?(?:[\\r\\n]+|$)/g;\n\nconst replaceOutsideStrings = (str: string, idx: number) =>\n  idx % 2 === 0 ? str.replace(REPLACE_CHAR_RE, '\\n') : str;\n\n/** Sanitizes a GraphQL document string by replacing comments and redundant newlines in it. */\nconst sanitizeDocument = (node: string): string =>\n  node.split(GRAPHQL_STRING_RE).map(replaceOutsideStrings).join('').trim();\n\nconst prints = new Map<DocumentNode | DefinitionNode, string>();\nconst docs = new Map<HashValue, KeyedDocumentNode>();\n\n/** A cached printing function for GraphQL documents.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A normalized printed string of the passed GraphQL document.\n *\n * @remarks\n * This function accepts a GraphQL query string or {@link DocumentNode},\n * then prints and sanitizes it. The sanitizer takes care of removing\n * comments, which otherwise alter the key of the document although the\n * document is otherwise equivalent to another.\n *\n * When a {@link DocumentNode} is passed to this function, it caches its\n * output by modifying the `loc.source.body` property on the GraphQL node.\n */\nexport const stringifyDocument = (\n  node: string | DefinitionNode | DocumentNode\n): string => {\n  let printed: string;\n  if (typeof node === 'string') {\n    printed = sanitizeDocument(node);\n  } else if (node.loc && docs.get((node as KeyedDocumentNode).__key) === node) {\n    printed = node.loc.source.body;\n  } else {\n    printed = prints.get(node) || sanitizeDocument(print(node));\n    prints.set(node, printed);\n  }\n\n  if (typeof node !== 'string' && !node.loc) {\n    (node as any).loc = {\n      start: 0,\n      end: printed.length,\n      source: {\n        body: printed,\n        name: SOURCE_NAME,\n        locationOffset: { line: 1, column: 1 },\n      },\n    };\n  }\n\n  return printed;\n};\n\n/** Computes the hash for a document's string using {@link stringifyDocument}'s output.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link HashValue}\n *\n * @privateRemarks\n * This function adds the operation name of the document to the hash, since sometimes\n * a merged document with multiple operations may be used. Although `urql` requires a\n * `DocumentNode` to only contain a single operation, when the cached `loc.source.body`\n * of a `DocumentNode` is used, this string may still contain multiple operations and\n * the resulting hash should account for only one at a time.\n */\nconst hashDocument = (\n  node: string | DefinitionNode | DocumentNode\n): HashValue => {\n  let key = phash(stringifyDocument(node));\n  // Add the operation name to the produced hash\n  if ((node as DocumentNode).definitions) {\n    const operationName = getOperationName(node as DocumentNode);\n    if (operationName) key = phash(`\\n# ${operationName}`, key);\n  }\n  return key;\n};\n\n/** Returns a canonical version of the passed `DocumentNode` with an added hash key.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link KeyedDocumentNode}\n *\n * @remarks\n * `urql` will always avoid unnecessary work, no matter whether a user passes `DocumentNode`s\n * or strings of GraphQL documents to its APIs.\n *\n * This function will return a canonical version of a {@link KeyedDocumentNode} no matter\n * which kind of input is passed, avoiding parsing or hashing of passed data as needed.\n */\nexport const keyDocument = (node: string | DocumentNode): KeyedDocumentNode => {\n  let key: HashValue;\n  let query: DocumentNode;\n  if (typeof node === 'string') {\n    key = hashDocument(node);\n    query = docs.get(key) || parse(node, { noLocation: true });\n  } else {\n    key = (node as KeyedDocumentNode).__key || hashDocument(node);\n    query = docs.get(key) || node;\n  }\n\n  // Add location information if it's missing\n  if (!query.loc) stringifyDocument(query);\n\n  (query as KeyedDocumentNode).__key = key;\n  docs.set(key, query as KeyedDocumentNode);\n  return query as KeyedDocumentNode;\n};\n\n/** Creates a `GraphQLRequest` from the passed parameters.\n *\n * @param q - A string of a document or a {@link DocumentNode}\n * @param variables - A variables object for the defined GraphQL operation.\n * @returns A {@link GraphQLRequest}\n *\n * @remarks\n * `createRequest` creates a {@link GraphQLRequest} from the passed parameters,\n * while replacing the document as needed with a canonical version of itself,\n * to avoid parsing, printing, or hashing the same input multiple times.\n *\n * If no variables are passed, canonically it'll default to an empty object,\n * which is removed from the resulting hash key.\n */\nexport const createRequest = <\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(\n  _query: DocumentInput<Data, Variables>,\n  _variables: Variables,\n  extensions?: RequestExtensions | undefined\n): GraphQLRequest<Data, Variables> => {\n  const variables = _variables || ({} as Variables);\n  const query = keyDocument(_query);\n  const printedVars = stringifyVariables(variables);\n  let key = query.__key;\n  if (printedVars !== '{}') key = phash(printedVars, key);\n  return { key, query, variables, extensions };\n};\n\n/** Returns the name of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's name contained within the document, or `undefined`\n */\nexport const getOperationName = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.name ? node.name.value : undefined;\n    }\n  }\n};\n\n/** Returns the type of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's type contained within the document, or `undefined`\n */\nexport const getOperationType = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.operation;\n    }\n  }\n};\n","import {\n  ExecutionResult,\n  Operation,\n  OperationResult,\n  IncrementalPayload,\n} from '../types';\nimport { CombinedError } from './error';\n\n/** Converts the `ExecutionResult` received for a given `Operation` to an `OperationResult`.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param result - The GraphQL API’s {@link ExecutionResult}.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n *\n * @throws\n * If no data, or errors are contained within the result, or the result is instead an incremental\n * response containing a `path` property, a “No Content” error is thrown.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const makeResult = (\n  operation: Operation,\n  result: ExecutionResult,\n  response?: any\n): OperationResult => {\n  if (!('data' in result) && !('errors' in result)) {\n    throw new Error('No Content');\n  }\n\n  const defaultHasNext = operation.kind === 'subscription';\n  return {\n    operation,\n    data: result.data,\n    error: Array.isArray(result.errors)\n      ? new CombinedError({\n          graphQLErrors: result.errors,\n          response,\n        })\n      : undefined,\n    extensions: result.extensions ? { ...result.extensions } : undefined,\n    hasNext: result.hasNext == null ? defaultHasNext : result.hasNext,\n    stale: false,\n  };\n};\n\nconst deepMerge = (target: any, source: any) => {\n  if (typeof target === 'object' && target != null) {\n    if (\n      !target.constructor ||\n      target.constructor === Object ||\n      Array.isArray(target)\n    ) {\n      target = Array.isArray(target) ? [...target] : { ...target };\n      for (const key of Object.keys(source))\n        target[key] = deepMerge(target[key], source[key]);\n      return target;\n    }\n  }\n  return source;\n};\n\n/** Merges an incrementally delivered `ExecutionResult` into a previous `OperationResult`.\n *\n * @param prevResult - The {@link OperationResult} that preceded this result.\n * @param path - The GraphQL API’s {@link ExecutionResult} that should be patching the `prevResult`.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns A new {@link OperationResult} patched with the incremental result.\n *\n * @remarks\n * This utility should be used to merge subsequent {@link ExecutionResult | ExecutionResults} of\n * incremental responses into a prior {@link OperationResult}.\n *\n * When directives like `@defer`, `@stream`, and `@live` are used, GraphQL may deliver new\n * results that modify previous results. In these cases, it'll set a `path` property to modify\n * the result it sent last. This utility is built to handle these cases and merge these payloads\n * into existing {@link OperationResult | OperationResults}.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const mergeResultPatch = (\n  prevResult: OperationResult,\n  nextResult: ExecutionResult,\n  response?: any\n): OperationResult => {\n  let errors = prevResult.error ? prevResult.error.graphQLErrors : [];\n  let hasExtensions = !!prevResult.extensions || !!nextResult.extensions;\n  const extensions = { ...prevResult.extensions, ...nextResult.extensions };\n\n  let incremental = nextResult.incremental;\n\n  // NOTE: We handle the old version of the incremental delivery payloads as well\n  if ('path' in nextResult) {\n    incremental = [nextResult as IncrementalPayload];\n  }\n\n  const withData = { data: prevResult.data };\n  if (incremental) {\n    for (const patch of incremental) {\n      if (Array.isArray(patch.errors)) {\n        errors.push(...(patch.errors as any));\n      }\n\n      if (patch.extensions) {\n        Object.assign(extensions, patch.extensions);\n        hasExtensions = true;\n      }\n\n      let prop: string | number = 'data';\n      let part: Record<string, any> | Array<any> = withData;\n      for (let i = 0, l = patch.path.length; i < l; prop = patch.path[i++]) {\n        part = part[prop] = Array.isArray(part[prop])\n          ? [...part[prop]]\n          : { ...part[prop] };\n      }\n\n      if (patch.items) {\n        const startIndex = +prop >= 0 ? (prop as number) : 0;\n        for (let i = 0, l = patch.items.length; i < l; i++)\n          part[startIndex + i] = deepMerge(\n            part[startIndex + i],\n            patch.items[i]\n          );\n      } else if (patch.data !== undefined) {\n        part[prop] = deepMerge(part[prop], patch.data);\n      }\n    }\n  } else {\n    withData.data = nextResult.data || prevResult.data;\n    errors = (nextResult.errors as any[]) || errors;\n  }\n\n  return {\n    operation: prevResult.operation,\n    data: withData.data,\n    error: errors.length\n      ? new CombinedError({ graphQLErrors: errors, response })\n      : undefined,\n    extensions: hasExtensions ? extensions : undefined,\n    hasNext: !!nextResult.hasNext,\n    stale: false,\n  };\n};\n\n/** Creates an `OperationResult` containing a network error for requests that encountered unexpected errors.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param error - The network-like error that prevented an API result from being delivered.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult} containing only a {@link CombinedError}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n * This function should be used for when the {@link CombinedError.networkError} property is\n * populated and no GraphQL execution actually occurred.\n */\nexport const makeErrorResult = (\n  operation: Operation,\n  error: Error,\n  response?: any\n): OperationResult => ({\n  operation,\n  data: undefined,\n  error: new CombinedError({\n    networkError: error,\n    response,\n  }),\n  extensions: undefined,\n  hasNext: false,\n  stale: false,\n});\n","import {\n  stringifyDocument,\n  getOperationName,\n  stringifyVariables,\n  extractFiles,\n} from '../utils';\n\nimport { AnyVariables, GraphQLRequest, Operation } from '../types';\n\n/** Abstract definition of the JSON data sent during GraphQL HTTP POST requests. */\nexport interface FetchBody {\n  query?: string;\n  operationName: string | undefined;\n  variables: undefined | Record<string, any>;\n  extensions: undefined | Record<string, any>;\n}\n\n/** Creates a GraphQL over HTTP compliant JSON request body.\n * @param request - An object containing a `query` document and `variables`.\n * @returns A {@link FetchBody}\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n */\nexport function makeFetchBody<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(request: Omit<GraphQLRequest<Data, Variables>, 'key'>): FetchBody {\n  const isAPQ =\n    request.extensions &&\n    request.extensions.persistedQuery &&\n    !request.extensions.persistedQuery.miss;\n  return {\n    query: isAPQ ? undefined : stringifyDocument(request.query),\n    operationName: getOperationName(request.query),\n    variables: request.variables || undefined,\n    extensions: request.extensions,\n  };\n}\n\n/** Creates a URL that will be called for a GraphQL HTTP request.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which may be replaced with a URL.\n *\n * @remarks\n * Creates the URL that’ll be called as part of a GraphQL HTTP request.\n * Built-in fetch exchanges support sending GET requests, even for\n * non-persisted full requests, which this function supports by being\n * able to serialize GraphQL requests into the URL.\n */\nexport const makeFetchURL = (\n  operation: Operation,\n  body?: FetchBody\n): string => {\n  const useGETMethod =\n    operation.kind === 'query' && operation.context.preferGetMethod;\n  if (!useGETMethod || !body) return operation.context.url;\n\n  const url = new URL(operation.context.url);\n  for (const key in body) {\n    const value = body[key];\n    if (value) {\n      url.searchParams.set(\n        key,\n        typeof value === 'object' ? stringifyVariables(value) : value\n      );\n    }\n  }\n\n  const finalUrl = url.toString();\n  if (finalUrl.length > 2047 && useGETMethod !== 'force') {\n    operation.context.preferGetMethod = false;\n    return operation.context.url;\n  }\n\n  return finalUrl;\n};\n\n/** Serializes a {@link FetchBody} into a {@link RequestInit.body} format. */\nconst serializeBody = (\n  operation: Operation,\n  body?: FetchBody\n): FormData | string | undefined => {\n  const omitBody =\n    operation.kind === 'query' && !!operation.context.preferGetMethod;\n  if (body && !omitBody) {\n    const json = stringifyVariables(body);\n    const files = extractFiles(body.variables);\n    if (files.size) {\n      const form = new FormData();\n      form.append('operations', json);\n      form.append(\n        'map',\n        stringifyVariables({\n          ...[...files.keys()].map(value => [value]),\n        })\n      );\n      let index = 0;\n      for (const file of files.values()) form.append(`${index++}`, file);\n      return form;\n    }\n    return json;\n  }\n};\n\n/** Creates a `RequestInit` object for a given `Operation`.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which is added to the options, if the request isn’t a GET request.\n *\n * @remarks\n * Creates the fetch options {@link RequestInit} object that’ll be passed to the Fetch API\n * as part of a GraphQL over HTTP request. It automatically sets a default `Content-Type`\n * header.\n *\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport const makeFetchOptions = (\n  operation: Operation,\n  body?: FetchBody\n): RequestInit => {\n  const headers: HeadersInit = {\n    accept:\n      operation.kind === 'subscription'\n        ? 'text/event-stream, multipart/mixed'\n        : 'application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed',\n  };\n  const extraOptions =\n    (typeof operation.context.fetchOptions === 'function'\n      ? operation.context.fetchOptions()\n      : operation.context.fetchOptions) || {};\n  if (extraOptions.headers)\n    for (const key in extraOptions.headers)\n      headers[key.toLowerCase()] = extraOptions.headers[key];\n  const serializedBody = serializeBody(operation, body);\n  if (typeof serializedBody === 'string' && !headers['content-type'])\n    headers['content-type'] = 'application/json';\n  return {\n    ...extraOptions,\n    method: serializedBody ? 'POST' : 'GET',\n    body: serializedBody,\n    headers,\n  };\n};\n","import { Source, fromAsyncIterable, filter, pipe } from 'wonka';\nimport { Operation, OperationResult, ExecutionResult } from '../types';\nimport { makeResult, makeErrorResult, mergeResultPatch } from '../utils';\n\nconst decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder() : null;\nconst boundaryHeaderRe = /boundary=\"?([^=\";]+)\"?/i;\nconst eventStreamRe = /data: ?([^\\n]+)/;\n\ntype ChunkData = Buffer | Uint8Array;\n\n// NOTE: We're avoiding referencing the `Buffer` global here to prevent\n// auto-polyfilling in Webpack\nconst toString = (input: Buffer | ArrayBuffer): string =>\n  input.constructor.name === 'Buffer'\n    ? (input as Buffer).toString()\n    : decoder!.decode(input as ArrayBuffer);\n\nasync function* streamBody(response: Response): AsyncIterableIterator<string> {\n  if (response.body![Symbol.asyncIterator]) {\n    for await (const chunk of response.body! as any)\n      yield toString(chunk as ChunkData);\n  } else {\n    const reader = response.body!.getReader();\n    let result: ReadableStreamReadResult<ChunkData>;\n    try {\n      while (!(result = await reader.read()).done) yield toString(result.value);\n    } finally {\n      reader.cancel();\n    }\n  }\n}\n\nasync function* split(\n  chunks: AsyncIterableIterator<string>,\n  boundary: string\n): AsyncIterableIterator<string> {\n  let buffer = '';\n  let boundaryIndex: number;\n  for await (const chunk of chunks) {\n    buffer += chunk;\n    while ((boundaryIndex = buffer.indexOf(boundary)) > -1) {\n      yield buffer.slice(0, boundaryIndex);\n      buffer = buffer.slice(boundaryIndex + boundary.length);\n    }\n  }\n}\n\nasync function* parseJSON(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  yield JSON.parse(await response.text());\n}\n\nasync function* parseEventStream(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  let payload: any;\n  for await (const chunk of split(streamBody(response), '\\n\\n')) {\n    const match = chunk.match(eventStreamRe);\n    if (match) {\n      const chunk = match[1];\n      try {\n        yield (payload = JSON.parse(chunk));\n      } catch (error) {\n        if (!payload) throw error;\n      }\n      if (payload && !payload.hasNext) break;\n    }\n  }\n  if (payload && payload.hasNext) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* parseMultipartMixed(\n  contentType: string,\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  const boundaryHeader = contentType.match(boundaryHeaderRe);\n  const boundary = '--' + (boundaryHeader ? boundaryHeader[1] : '-');\n  let isPreamble = true;\n  let payload: any;\n  for await (const chunk of split(streamBody(response), boundary)) {\n    if (isPreamble) {\n      isPreamble = false;\n    } else {\n      try {\n        yield (payload = JSON.parse(\n          chunk.slice(chunk.indexOf('\\r\\n\\r\\n') + 4)\n        ));\n      } catch (error) {\n        if (!payload) throw error;\n      }\n    }\n    if (payload && !payload.hasNext) break;\n  }\n  if (payload && payload.hasNext) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* fetchOperation(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n) {\n  let networkMode = true;\n  let abortController: AbortController | void;\n  let result: OperationResult | null = null;\n  let response: Response;\n\n  try {\n    if (typeof AbortController !== 'undefined') {\n      fetchOptions.signal = (abortController = new AbortController()).signal;\n    }\n\n    // Delay for a tick to give the Client a chance to cancel the request\n    // if a teardown comes in immediately\n    yield await Promise.resolve();\n\n    response = await (operation.context.fetch || fetch)(url, fetchOptions);\n    const contentType = response.headers.get('Content-Type') || '';\n\n    let results: AsyncIterable<ExecutionResult>;\n    if (/multipart\\/mixed/i.test(contentType)) {\n      results = parseMultipartMixed(contentType, response);\n    } else if (/text\\/event-stream/i.test(contentType)) {\n      results = parseEventStream(response);\n    } else if (!/text\\//i.test(contentType)) {\n      results = parseJSON(response);\n    } else {\n      throw new Error(await response.text());\n    }\n\n    for await (const payload of results) {\n      result = result\n        ? mergeResultPatch(result, payload, response)\n        : makeResult(operation, payload, response);\n      networkMode = false;\n      yield result;\n      networkMode = true;\n    }\n\n    if (!result) {\n      yield (result = makeResult(operation, {}, response));\n    }\n  } catch (error: any) {\n    if (!networkMode) {\n      throw error;\n    }\n\n    yield makeErrorResult(\n      operation,\n      (response!.status < 200 || response!.status >= 300) &&\n        response!.statusText\n        ? new Error(response!.statusText)\n        : error,\n      response!\n    );\n  } finally {\n    if (abortController) abortController.abort();\n  }\n}\n\n/** Makes a GraphQL HTTP request to a given API by wrapping around the Fetch API.\n *\n * @param operation - The {@link Operation} that should be sent via GraphQL over HTTP.\n * @param url - The endpoint URL for the GraphQL HTTP API.\n * @param fetchOptions - The {@link RequestInit} fetch options for the request.\n * @returns A Wonka {@link Source} of {@link OperationResult | OperationResults}.\n *\n * @remarks\n * This utility defines how all built-in fetch exchanges make GraphQL HTTP requests,\n * supporting multipart incremental responses, cancellation and other smaller\n * implementation details.\n *\n * If you’re implementing a modified fetch exchange for a GraphQL over HTTP API\n * it’s recommended you use this utility.\n *\n * Hint: This function does not use the passed `operation` to create or modify the\n * `fetchOptions` and instead expects that the options have already been created\n * using {@link makeFetchOptions} and modified as needed.\n *\n * @throws\n * If the `fetch` polyfill or globally available `fetch` function doesn’t support\n * streamed multipart responses while trying to handle a `multipart/mixed` GraphQL response,\n * the source will throw “Streaming requests unsupported”.\n * This shouldn’t happen in modern browsers and Node.js.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport function makeFetchSource(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n): Source<OperationResult> {\n  return pipe(\n    fromAsyncIterable(fetchOperation(operation, url, fetchOptions)),\n    filter((result): result is OperationResult => !!result)\n  );\n}\n"],"names":["rehydrateGraphQlError","error","extensions","name","message","GraphQLError","source","positions","path","CombinedError","Error","constructor","input","graphQLErrors","map","normalizedGraphQLErrors","networkErr","graphQlErrs","super","this","networkError","response","toString","phash","x","seed","l","length","i","h","charCodeAt","seen","Set","WeakMap","has","stringify","JSON","toJSON","_out","Array","out","value","keys","sort","Object","Math","random","slice","cache","set","key","__key","add","_key","_value","delete","extract","isArray","stringifyVariables","clear","FileConstructor","File","NoopConstructor","Blob","SOURCE_NAME","GRAPHQL_STRING_RE","str","idx","replace","REPLACE_CHAR_RE","prints","Map","sanitizeDocument","stringifyDocument","node","printed","loc","get","body","print","start","hashDocument","definitions","operationName","getOperationName","keyDocument","query","docs","noLocation","createRequest","_query","_variables","variables","printedVars","undefined","getOperationType","makeResult","operation","result","kind","data","errors","hasNext","stale","deepMerge","target","mergeResultPatch","prevResult","nextResult","hasExtensions","incremental","withData","patch","push","assign","part","prop","items","startIndex","_l","_i","makeErrorResult","makeFetchBody","request","persistedQuery","miss","isAPQ","makeFetchURL","useGETMethod","context","preferGetMethod","url","URL","searchParams","finalUrl","json","BlobConstructor","extractFiles","size","files","form","append","FormData","file","values","index","makeFetchOptions","headers","accept","fetchOptions","extraOptions","toLowerCase","serializeBody","serializedBody","method","decoder","TextDecoder","boundaryHeaderRe","async","streamBody","Symbol","asyncIterator","chunk","getReader","reader","read","done","cancel","split","chunks","boundary","buffer","boundaryIndex","indexOf","fetchOperation","networkMode","abortController","AbortController","signal","contentType","fetch","parseMultipartMixed","boundaryHeader","match","isPreamble","payload","parse","test","parseJSON","parseEventStream","_chunk","results","text","status","statusText","abort","makeFetchSource","filter","fromAsyncIterable"],"mappings":"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"}