{"version":3,"file":"urql-core.js","sources":["../src/utils/typenames.ts","../src/utils/maskTypename.ts","../src/utils/streamUtils.ts","../src/utils/operation.ts","../src/utils/index.ts","../src/gql.ts","../src/exchanges/cache.ts","../src/exchanges/ssr.ts","../src/exchanges/subscription.ts","../src/exchanges/debug.ts","../src/exchanges/dedup.ts","../src/exchanges/fetch.ts","../src/exchanges/compose.ts","../src/exchanges/map.ts","../src/exchanges/fallback.ts","../src/client.ts"],"sourcesContent":["import { Kind, SelectionNode, DefinitionNode } from '@0no-co/graphql.web';\nimport { KeyedDocumentNode, keyDocument } from './request';\nimport { TypedDocumentNode } from '../types';\n\ninterface EntityLike {\n  [key: string]: EntityLike | EntityLike[] | any;\n  __typename: string | null | void;\n}\n\nconst collectTypes = (obj: EntityLike | EntityLike[], types: Set<string>) => {\n  if (Array.isArray(obj)) {\n    for (const item of obj) collectTypes(item, types);\n  } else if (typeof obj === 'object' && obj !== null) {\n    for (const key in obj) {\n      if (key === '__typename' && typeof obj[key] === 'string') {\n        types.add(obj[key] as string);\n      } else {\n        collectTypes(obj[key], types);\n      }\n    }\n  }\n\n  return types;\n};\n\n/** Finds and returns a list of `__typename` fields found in response data.\n *\n * @privateRemarks\n * This is used by `@urql/core`’s document `cacheExchange` to find typenames\n * in a given GraphQL response’s data.\n */\nexport const collectTypesFromResponse = (response: object): string[] => [\n  ...collectTypes(response as EntityLike, new Set()),\n];\n\nconst formatNode = <\n  T extends SelectionNode | DefinitionNode | TypedDocumentNode<any, any>\n>(\n  node: T\n): T => {\n  let hasChanged = false;\n\n  if ('definitions' in node) {\n    const definitions: DefinitionNode[] = [];\n    for (const definition of node.definitions) {\n      const newDefinition = formatNode(definition);\n      hasChanged = hasChanged || newDefinition !== definition;\n      definitions.push(newDefinition);\n    }\n    if (hasChanged) return { ...node, definitions };\n  } else if ('selectionSet' in node) {\n    const selections: SelectionNode[] = [];\n    let hasTypename = node.kind === Kind.OPERATION_DEFINITION;\n    if (node.selectionSet) {\n      for (const selection of node.selectionSet.selections || []) {\n        hasTypename =\n          hasTypename ||\n          (selection.kind === Kind.FIELD &&\n            selection.name.value === '__typename' &&\n            !selection.alias);\n        const newSelection = formatNode(selection);\n        hasChanged = hasChanged || newSelection !== selection;\n        selections.push(newSelection);\n      }\n      if (!hasTypename) {\n        hasChanged = true;\n        selections.push({\n          kind: Kind.FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: '__typename',\n          },\n        });\n      }\n      if (hasChanged)\n        return { ...node, selectionSet: { ...node.selectionSet, selections } };\n    }\n  }\n\n  return node;\n};\n\nconst formattedDocs = new Map<number, KeyedDocumentNode>();\n\n/** Adds `__typename` fields to a GraphQL `DocumentNode`.\n *\n * @param node - a {@link DocumentNode}.\n * @returns a copy of the passed {@link DocumentNode} with added `__typename` introspection fields.\n *\n * @remarks\n * Cache {@link Exchange | Exchanges} will require typename introspection to\n * recognize types in a GraphQL response. To retrieve these typenames,\n * this function is used to add the `__typename` fields to non-root\n * selection sets of a GraphQL document.\n *\n * This utility also preserves the internally computed key of the\n * document as created by {@link createRequest} to avoid any\n * formatting from being duplicated.\n *\n * @see {@link https://spec.graphql.org/October2021/#sec-Type-Name-Introspection} for more information\n * on typename introspection via the `__typename` field.\n */\nexport const formatDocument = <T extends TypedDocumentNode<any, any>>(\n  node: T\n): T => {\n  const query = keyDocument(node);\n\n  let result = formattedDocs.get(query.__key);\n  if (!result) {\n    formattedDocs.set(\n      query.__key,\n      (result = formatNode(query) as KeyedDocumentNode)\n    );\n    // Ensure that the hash of the resulting document won't suddenly change\n    // we are marking __key as non-enumerable so when external exchanges use visit\n    // to manipulate a document we won't restore the previous query due to the __key\n    // property.\n    Object.defineProperty(result, '__key', {\n      value: query.__key,\n      enumerable: false,\n    });\n  }\n\n  return result as unknown as T;\n};\n","/** Used to recursively mark `__typename` fields in data as non-enumerable.\n *\n * @remarks\n * This utility can be used to recursively copy GraphQl response data and hide\n * all `__typename` fields present on it.\n *\n * Hint: It’s not recommended to do this, unless it's absolutely necessary as\n * cloning and modifying all data of a response can be unnecessarily slow, when\n * a manual and more specific copy/mask is more efficient.\n *\n * @see {@link ClientOptions.maskTypename} for a description of how the `Client` uses this utility.\n */\nexport const maskTypename = (data: any, isRoot?: boolean): any => {\n  if (!data || typeof data !== 'object') {\n    return data;\n  } else if (Array.isArray(data)) {\n    return data.map(d => maskTypename(d));\n  } else if (\n    data &&\n    typeof data === 'object' &&\n    (isRoot || '__typename' in data)\n  ) {\n    const acc = {};\n    for (const key in data) {\n      if (key === '__typename') {\n        Object.defineProperty(acc, '__typename', {\n          enumerable: false,\n          value: data.__typename,\n        });\n      } else {\n        acc[key] = maskTypename(data[key]);\n      }\n    }\n    return acc;\n  } else {\n    return data;\n  }\n};\n","import { Sink, Source, subscribe, take, filter, toPromise, pipe } from 'wonka';\nimport { OperationResult, OperationResultSource } from '../types';\n\n/** Patches a `toPromise` method onto the `Source` passed to it.\n * @param source$ - the Wonka {@link Source} to patch.\n * @returns The passed `source$` with a patched `toPromise` method as a {@link PromisifiedSource}.\n * @internal\n */\nexport function withPromise<T extends OperationResult>(\n  _source$: Source<T>\n): OperationResultSource<T> {\n  const source$ = ((sink: Sink<T>) =>\n    _source$(sink)) as OperationResultSource<T>;\n  source$.toPromise = () =>\n    pipe(\n      source$,\n      filter(result => !result.stale && !result.hasNext),\n      take(1),\n      toPromise\n    );\n  source$.then = (onResolve, onReject) =>\n    source$.toPromise().then(onResolve, onReject);\n  source$.subscribe = onResult => subscribe(onResult)(source$);\n  return source$;\n}\n","import {\n  AnyVariables,\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationType,\n} from '../types';\n\n/** Creates a {@link Operation} from the given parameters.\n *\n * @param kind - The {@link OperationType} of GraphQL operation, i.e. `query`, `mutation`, or `subscription`.\n * @param request - The {@link GraphQLRequest} or {@link Operation} used as a template for the new `Operation`.\n * @param context - The {@link OperationContext} `context` data for the `Operation`.\n * @returns A new {@link Operation}.\n *\n * @remarks\n * This method is both used to create new {@link Operation | Operations} as well as copy and modify existing\n * operations. While it’s not required to use this function to copy an `Operation`, it is recommended, in case\n * additional dynamic logic is added to them in the future.\n *\n * Hint: When an {@link Operation} is passed to the `request` argument, the `context` argument does not have to be\n * a complete {@link OperationContext} and will instead be combined with passed {@link Operation.context}.\n *\n * @example\n * An example of copying an existing `Operation` to modify its `context`:\n *\n * ```ts\n * makeOperation(\n *   operation.kind,\n *   operation,\n *   { requestPolicy: 'cache-first' },\n * );\n * ```\n */\nfunction makeOperation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(\n  kind: OperationType,\n  request: GraphQLRequest<Data, Variables>,\n  context: OperationContext\n): Operation<Data, Variables>;\n\nfunction makeOperation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(\n  kind: OperationType,\n  request: Operation<Data, Variables>,\n  context?: Partial<OperationContext>\n): Operation<Data, Variables>;\n\nfunction makeOperation(kind, request, context) {\n  return {\n    ...request,\n    kind,\n    context: request.context\n      ? {\n          ...request.context,\n          ...context,\n        }\n      : context || request.context,\n  };\n}\n\nexport { makeOperation };\n\n/** Adds additional metadata to an `Operation`'s `context.meta` property while copying it.\n * @see {@link OperationDebugMeta} for more information on the {@link OperationContext.meta} property.\n */\nexport const addMetadata = (\n  operation: Operation,\n  meta: OperationContext['meta']\n) => {\n  return makeOperation(operation.kind, operation, {\n    meta: {\n      ...operation.context.meta,\n      ...meta,\n    },\n  });\n};\n","export * from './error';\nexport * from './request';\nexport * from './result';\nexport * from './typenames';\nexport * from './variables';\nexport * from './maskTypename';\nexport * from './streamUtils';\nexport * from './operation';\n\nexport const noop = () => {\n  /* noop */\n};\n","/* eslint-disable prefer-rest-params */\nimport { Kind } from '@0no-co/graphql.web';\nimport type { DocumentNode, DefinitionNode } from './utils/graphql';\nimport { AnyVariables, TypedDocumentNode } from './types';\nimport { keyDocument, stringifyDocument } from './utils';\n\n/** A GraphQL parse function, which may be called as a tagged template literal, returning a parsed {@link DocumentNode}.\n *\n * @remarks\n * The `gql` tag or function is used to parse a GraphQL query document into a {@link DocumentNode}.\n *\n * When used as a tagged template, `gql` will automatically merge fragment definitions into the resulting\n * document and deduplicate them.\n *\n * It enforces that all fragments have a unique name. When fragments with different definitions share a name,\n * it will log a warning in development.\n *\n * Hint: It’s recommended to use this `gql` function over other GraphQL parse functions, since it puts the parsed\n * results directly into `@urql/core`’s internal caches and prevents further unnecessary work.\n *\n * @example\n * ```ts\n * const AuthorFragment = gql`\n *   fragment AuthorDisplayComponent on Author {\n *     id\n *     name\n *   }\n * `;\n *\n * const BookFragment = gql`\n *   fragment ListBookComponent on Book {\n *     id\n *     title\n *     author {\n *       ...AuthorDisplayComponent\n *     }\n *   }\n *\n *   ${AuthorFragment}\n * `;\n *\n * const BookQuery = gql`\n *   query Book($id: ID!) {\n *     book(id: $id) {\n *       ...BookFragment\n *     }\n *   }\n *\n *   ${BookFragment}\n * `;\n * ```\n */\nfunction gql<Data = any, Variables extends AnyVariables = AnyVariables>(\n  strings: TemplateStringsArray,\n  ...interpolations: Array<TypedDocumentNode | DocumentNode | string>\n): TypedDocumentNode<Data, Variables>;\n\nfunction gql<Data = any, Variables extends AnyVariables = AnyVariables>(\n  string: string\n): TypedDocumentNode<Data, Variables>;\n\nfunction gql(parts: string | TemplateStringsArray /* arguments */) {\n  const fragmentNames = new Map<string, string>();\n  const definitions: DefinitionNode[] = [];\n  const source: DocumentNode[] = [];\n\n  // Apply the entire tagged template body's definitions\n  let body: string = Array.isArray(parts) ? parts[0] : parts || '';\n  for (let i = 1; i < arguments.length; i++) {\n    const value = arguments[i];\n    if (value && value.definitions) {\n      source.push(value);\n    } else {\n      body += value;\n    }\n\n    body += arguments[0][i];\n  }\n\n  source.unshift(keyDocument(body));\n  for (const document of source) {\n    for (const definition of document.definitions) {\n      if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n        const name = definition.name.value;\n        const value = stringifyDocument(definition);\n        // Fragments will be deduplicated according to this Map\n        if (!fragmentNames.has(name)) {\n          fragmentNames.set(name, value);\n          definitions.push(definition);\n        } else if (\n          process.env.NODE_ENV !== 'production' &&\n          fragmentNames.get(name) !== value\n        ) {\n          // Fragments with the same names is expected to have the same contents\n          console.warn(\n            '[WARNING: Duplicate Fragment] A fragment with name `' +\n              name +\n              '` already exists in this document.\\n' +\n              'While fragment names may not be unique across your source, each name must be unique per document.'\n          );\n        }\n      } else {\n        definitions.push(definition);\n      }\n    }\n  }\n\n  return keyDocument({\n    kind: Kind.DOCUMENT,\n    definitions,\n  });\n}\n\nexport { gql };\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, map, merge, pipe, tap } from 'wonka';\n\nimport { Client } from '../client';\nimport { Exchange, Operation, OperationResult } from '../types';\n\nimport {\n  makeOperation,\n  addMetadata,\n  collectTypesFromResponse,\n  formatDocument,\n} from '../utils';\n\ntype ResultCache = Map<number, OperationResult>;\ntype OperationCache = Map<string, Set<number>>;\n\nconst shouldSkip = ({ kind }: Operation) =>\n  kind !== 'mutation' && kind !== 'query';\n\n/** Default document cache exchange.\n *\n * @remarks\n * The default document cache in `urql` avoids sending the same GraphQL request\n * multiple times by caching it using the {@link Operation.key}. It will invalidate\n * query results automatically whenever it sees a mutation responses with matching\n * `__typename`s in their responses.\n *\n * The document cache will get the introspected `__typename` fields by modifying\n * your GraphQL operation documents using the {@link formatDocument} utility.\n *\n * This automatic invalidation strategy can fail if your query or mutation don’t\n * contain matching typenames, for instance, because the query contained an\n * empty list.\n * You can manually add hints for this exchange by specifying a list of\n * {@link OperationContext.additionalTypenames} for queries and mutations that\n * should invalidate one another.\n *\n * @see {@link https://urql.dev/goto/docs/basics/document-caching} for more information on this cache.\n */\nexport const cacheExchange: Exchange = ({ forward, client, dispatchDebug }) => {\n  const resultCache: ResultCache = new Map();\n  const operationCache: OperationCache = new Map();\n\n  // Adds unique typenames to query (for invalidating cache entries)\n  const mapTypeNames = (operation: Operation): Operation => {\n    const formattedOperation = makeOperation(operation.kind, operation);\n    formattedOperation.query = formatDocument(operation.query);\n    return formattedOperation;\n  };\n\n  const isOperationCached = (operation: Operation) =>\n    operation.kind === 'query' &&\n    operation.context.requestPolicy !== 'network-only' &&\n    (operation.context.requestPolicy === 'cache-only' ||\n      resultCache.has(operation.key));\n\n  return ops$ => {\n    const cachedOps$ = pipe(\n      ops$,\n      filter(op => !shouldSkip(op) && isOperationCached(op)),\n      map(operation => {\n        const cachedResult = resultCache.get(operation.key);\n\n        dispatchDebug({\n          operation,\n          ...(cachedResult\n            ? {\n                type: 'cacheHit',\n                message: 'The result was successfully retried from the cache',\n              }\n            : {\n                type: 'cacheMiss',\n                message: 'The result could not be retrieved from the cache',\n              }),\n        });\n\n        let result: OperationResult = cachedResult!;\n        if (process.env.NODE_ENV !== 'production') {\n          result = {\n            ...result,\n            operation: addMetadata(operation, {\n              cacheOutcome: cachedResult ? 'hit' : 'miss',\n            }),\n          };\n        }\n\n        if (operation.context.requestPolicy === 'cache-and-network') {\n          result.stale = true;\n          reexecuteOperation(client, operation);\n        }\n\n        return result;\n      })\n    );\n\n    const forwardedOps$ = pipe(\n      merge([\n        pipe(\n          ops$,\n          filter(op => !shouldSkip(op) && !isOperationCached(op)),\n          map(mapTypeNames)\n        ),\n        pipe(\n          ops$,\n          filter(op => shouldSkip(op))\n        ),\n      ]),\n      map(op => addMetadata(op, { cacheOutcome: 'miss' })),\n      filter(\n        op => op.kind !== 'query' || op.context.requestPolicy !== 'cache-only'\n      ),\n      forward,\n      tap(response => {\n        let { operation } = response;\n        if (!operation) return;\n\n        const typenames = collectTypesFromResponse(response.data).concat(\n          operation.context.additionalTypenames || []\n        );\n\n        // Invalidates the cache given a mutation's response\n        if (response.operation.kind === 'mutation') {\n          const pendingOperations = new Set<number>();\n\n          dispatchDebug({\n            type: 'cacheInvalidation',\n            message: `The following typenames have been invalidated: ${typenames}`,\n            operation,\n            data: { typenames, response },\n          });\n\n          for (let i = 0; i < typenames.length; i++) {\n            const typeName = typenames[i];\n            let operations = operationCache.get(typeName);\n            if (!operations)\n              operationCache.set(typeName, (operations = new Set()));\n            for (const key of operations.values()) pendingOperations.add(key);\n            operations.clear();\n          }\n\n          for (const key of pendingOperations.values()) {\n            if (resultCache.has(key)) {\n              operation = (resultCache.get(key) as OperationResult).operation;\n              resultCache.delete(key);\n              reexecuteOperation(client, operation);\n            }\n          }\n        } else if (operation.kind === 'query' && response.data) {\n          resultCache.set(operation.key, response);\n          for (let i = 0; i < typenames.length; i++) {\n            const typeName = typenames[i];\n            let operations = operationCache.get(typeName);\n            if (!operations)\n              operationCache.set(typeName, (operations = new Set()));\n            operations.add(operation.key);\n          }\n        }\n      })\n    );\n\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\n/** Reexecutes an `Operation` with the `network-only` request policy.\n * @internal\n */\nexport const reexecuteOperation = (client: Client, operation: Operation) => {\n  return client.reexecuteOperation(\n    makeOperation(operation.kind, operation, {\n      requestPolicy: 'network-only',\n    })\n  );\n};\n","import type { GraphQLError } from '../utils/graphql';\nimport { pipe, filter, merge, map, tap } from 'wonka';\nimport { Exchange, OperationResult, Operation } from '../types';\nimport { addMetadata, CombinedError } from '../utils';\nimport { reexecuteOperation } from './cache';\n\n/** A serialized version of an {@link OperationResult}.\n *\n * @remarks\n * All properties are serialized separately as JSON strings, except for the\n * {@link CombinedError} to speed up JS parsing speed, even if a result doesn’t\n * end up being used.\n *\n * @internal\n */\nexport interface SerializedResult {\n  hasNext?: boolean;\n  /** JSON-serialized version of {@link OperationResult.data}. */\n  data?: string | undefined; // JSON string of data\n  /** JSON-serialized version of {@link OperationResult.extensions}. */\n  extensions?: string | undefined;\n  /** JSON version of {@link CombinedError}. */\n  error?: {\n    graphQLErrors: Array<Partial<GraphQLError> | string>;\n    networkError?: string;\n  };\n}\n\n/** A dictionary of {@link Operation.key} keys to serializable {@link SerializedResult} objects.\n *\n * @remarks\n * It’s not recommended to modify the serialized data manually, however, multiple payloads of\n * this dictionary may safely be merged and combined.\n */\nexport interface SSRData {\n  [key: string]: SerializedResult;\n}\n\n/** Options for the `ssrExchange` allowing it to either operate on the server- or client-side. */\nexport interface SSRExchangeParams {\n  /** Indicates to the {@link SSRExchange} whether it's currently in server-side or client-side mode.\n   *\n   * @remarks\n   * Depending on this option, the {@link SSRExchange} will either capture or replay results.\n   * When `true`, it’s in client-side mode and results will be serialized. When `false`, it’ll\n   * use its deserialized data and replay results from it.\n   */\n  isClient?: boolean;\n  /** May be used on the client-side to pass the {@link SSRExchange} serialized data from the server-side.\n   *\n   * @remarks\n   * Alternatively, {@link SSRExchange.restoreData} may be called to imperatively add serialized data to\n   * the exchange.\n   *\n   * Hint: This method also works on the server-side to add to the initial serialized data, which enables\n   * you to combine multiple {@link SSRExchange} results, as needed.\n   */\n  initialState?: SSRData;\n  /** Forces a new API request to be sent in the background after replaying the deserialized result.\n   *\n   * @remarks\n   * Similarly to the `cache-and-network` {@link RequestPolicy}, this option tells the {@link SSRExchange}\n   * to send a new API request for the {@link Operation} after replaying a serialized result.\n   *\n   * Hint: This is useful when you're caching SSR results and need the client-side to update itself after\n   * rendering the initial serialized SSR results.\n   */\n  staleWhileRevalidate?: boolean;\n  /** Forces {@link OperationResult.extensions} to be serialized alongside the rest of a result.\n   *\n   * @remarks\n   * Entries in the `extension` object of a GraphQL result are often non-standard metdata, and many\n   * APIs use it for data that changes between every request. As such, the {@link SSRExchange} will\n   * not serialize this data by default, unless this flag is set.\n   */\n  includeExtensions?: boolean;\n}\n\n/** An `SSRExchange` either in server-side mode, serializing results, or client-side mode, deserializing and replaying results..\n *\n * @remarks\n * This same {@link Exchange} is used in your code both for the client-side and server-side as it’s “universal”\n * and can be put into either client-side or server-side mode using the {@link SSRExchangeParams.isClient} flag.\n *\n * In server-side mode, the `ssrExchange` will “record” results it sees from your API and provide them for you\n * to send to the client-side using the {@link SSRExchange.extractData} method.\n *\n * In client-side mode, the `ssrExchange` will use these serialized results, rehydrated either using\n * {@link SSRExchange.restoreData} or {@link SSRexchangeParams.initialState}, to replay results the\n * server-side has seen and sent before.\n *\n * Each serialized result will only be replayed once, as it’s assumed that your cache exchange will have the\n * results cached afterwards.\n */\nexport interface SSRExchange extends Exchange {\n  /** Client-side method to add serialized results to the {@link SSRExchange}.\n   * @param data - {@link SSRData},\n   */\n  restoreData(data: SSRData): void;\n  /** Server-side method to get all serialized results the {@link SSRExchange} has captured.\n   * @returns an {@link SSRData} dictionary.\n   */\n  extractData(): SSRData;\n}\n\n/** Serialize an OperationResult to plain JSON */\nconst serializeResult = (\n  result: OperationResult,\n  includeExtensions: boolean\n): SerializedResult => {\n  const serialized: SerializedResult = {\n    data: JSON.stringify(result.data),\n    hasNext: result.hasNext,\n  };\n\n  if (result.data !== undefined) {\n    serialized.data = JSON.stringify(result.data);\n  }\n\n  if (includeExtensions && result.extensions !== undefined) {\n    serialized.extensions = JSON.stringify(result.extensions);\n  }\n\n  if (result.error) {\n    serialized.error = {\n      graphQLErrors: result.error.graphQLErrors.map(error => {\n        if (!error.path && !error.extensions) return error.message;\n\n        return {\n          message: error.message,\n          path: error.path,\n          extensions: error.extensions,\n        };\n      }),\n    };\n\n    if (result.error.networkError) {\n      serialized.error.networkError = '' + result.error.networkError;\n    }\n  }\n\n  return serialized;\n};\n\n/** Deserialize plain JSON to an OperationResult\n * @internal\n */\nconst deserializeResult = (\n  operation: Operation,\n  result: SerializedResult,\n  includeExtensions: boolean\n): OperationResult => ({\n  operation,\n  data: result.data ? JSON.parse(result.data) : undefined,\n  extensions:\n    includeExtensions && result.extensions\n      ? JSON.parse(result.extensions)\n      : undefined,\n  error: result.error\n    ? new CombinedError({\n        networkError: result.error.networkError\n          ? new Error(result.error.networkError)\n          : undefined,\n        graphQLErrors: result.error.graphQLErrors,\n      })\n    : undefined,\n  stale: false,\n  hasNext: !!result.hasNext,\n});\n\nconst revalidated = new Set<number>();\n\n/** Creates a server-side rendering `Exchange` that either captures responses on the server-side or replays them on the client-side.\n *\n * @param params - An {@link SSRExchangeParams} configuration object.\n * @returns the created {@link SSRExchange}\n *\n * @remarks\n * When dealing with server-side rendering, we essentially have two {@link Client | Clients} making requests,\n * the server-side client, and the client-side one. The `ssrExchange` helps implementing a tiny cache on both\n * sides that:\n *\n * - captures results on the server-side which it can serialize,\n * - replays results on the client-side that it deserialized from the server-side.\n *\n * Hint: The `ssrExchange` is basically an exchange that acts like a replacement for any fetch exchange\n * temporarily. As such, you should place it after your cache exchange but in front of any fetch exchange.\n */\nexport const ssrExchange = (params: SSRExchangeParams = {}): SSRExchange => {\n  const staleWhileRevalidate = !!params.staleWhileRevalidate;\n  const includeExtensions = !!params.includeExtensions;\n  const data: Record<string, SerializedResult | null> = {};\n\n  // On the client-side, we delete results from the cache as they're resolved\n  // this is delayed so that concurrent queries don't delete each other's data\n  const invalidateQueue: number[] = [];\n  const invalidate = (result: OperationResult) => {\n    invalidateQueue.push(result.operation.key);\n    if (invalidateQueue.length === 1) {\n      Promise.resolve().then(() => {\n        let key: number | void;\n        while ((key = invalidateQueue.shift())) {\n          data[key] = null;\n        }\n      });\n    }\n  };\n\n  // The SSR Exchange is a temporary cache that can populate results into data for suspense\n  // On the client it can be used to retrieve these temporary results from a rehydrated cache\n  const ssr: SSRExchange =\n    ({ client, forward }) =>\n    ops$ => {\n      // params.isClient tells us whether we're on the client-side\n      // By default we assume that we're on the client if suspense-mode is disabled\n      const isClient =\n        params && typeof params.isClient === 'boolean'\n          ? !!params.isClient\n          : !client.suspense;\n\n      let forwardedOps$ = pipe(\n        ops$,\n        filter(\n          operation =>\n            !data[operation.key] ||\n            !!data[operation.key]!.hasNext ||\n            operation.context.requestPolicy === 'network-only'\n        ),\n        forward\n      );\n\n      // NOTE: Since below we might delete the cached entry after accessing\n      // it once, cachedOps$ needs to be merged after forwardedOps$\n      let cachedOps$ = pipe(\n        ops$,\n        filter(\n          operation =>\n            !!data[operation.key] &&\n            operation.context.requestPolicy !== 'network-only'\n        ),\n        map(op => {\n          const serialized = data[op.key]!;\n          const cachedResult = deserializeResult(\n            op,\n            serialized,\n            includeExtensions\n          );\n\n          if (staleWhileRevalidate && !revalidated.has(op.key)) {\n            cachedResult.stale = true;\n            revalidated.add(op.key);\n            reexecuteOperation(client, op);\n          }\n\n          const result: OperationResult = {\n            ...cachedResult,\n            operation: addMetadata(op, {\n              cacheOutcome: 'hit',\n            }),\n          };\n          return result;\n        })\n      );\n\n      if (!isClient) {\n        // On the server we cache results in the cache as they're resolved\n        forwardedOps$ = pipe(\n          forwardedOps$,\n          tap((result: OperationResult) => {\n            const { operation } = result;\n            if (operation.kind !== 'mutation') {\n              const serialized = serializeResult(result, includeExtensions);\n              data[operation.key] = serialized;\n            }\n          })\n        );\n      } else {\n        // On the client we delete results from the cache as they're resolved\n        cachedOps$ = pipe(cachedOps$, tap(invalidate));\n      }\n\n      return merge([forwardedOps$, cachedOps$]);\n    };\n\n  ssr.restoreData = (restore: SSRData) => {\n    for (const key in restore) {\n      // We only restore data that hasn't been previously invalidated\n      if (data[key] !== null) {\n        data[key] = restore[key];\n      }\n    }\n  };\n\n  ssr.extractData = () => {\n    const result: SSRData = {};\n    for (const key in data) if (data[key] != null) result[key] = data[key]!;\n    return result;\n  };\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n","import {\n  filter,\n  make,\n  merge,\n  mergeMap,\n  pipe,\n  Subscription,\n  Source,\n  takeUntil,\n} from 'wonka';\n\nimport {\n  makeResult,\n  mergeResultPatch,\n  makeErrorResult,\n  makeOperation,\n} from '../utils';\n\nimport {\n  Exchange,\n  ExecutionResult,\n  Operation,\n  OperationResult,\n} from '../types';\n\nimport { FetchBody, makeFetchBody } from '../internal';\n\n/** An abstract observer-like interface.\n *\n * @remarks\n * Observer-like interfaces are passed to {@link ObservableLike.subscribe} to provide them\n * with callbacks for their events.\n *\n * @see {@link https://github.com/tc39/proposal-observable} for the full TC39 Observable proposal.\n */\nexport interface ObserverLike<T> {\n  /** Callback for values an {@link ObservableLike} emits. */\n  next: (value: T) => void;\n  /** Callback for an error an {@link ObservableLike} emits, which ends the subscription. */\n  error: (err: any) => void;\n  /** Callback for the completion of an {@link ObservableLike}, which ends the subscription. */\n  complete: () => void;\n}\n\n/** An abstract observable-like interface.\n *\n * @remarks\n * Observable, or Observable-like interfaces, are often used by GraphQL transports to abstract\n * how they send {@link ExecutionResult | ExecutionResults} to consumers. These generally contain\n * a `subscribe` method accepting an {@link ObserverLike} structure.\n *\n * @see {@link https://github.com/tc39/proposal-observable} for the full TC39 Observable proposal.\n */\nexport interface ObservableLike<T> {\n  /** Start the Observable-like subscription and returns a subscription handle.\n   *\n   * @param observer - an {@link ObserverLike} object with result, error, and completion callbacks.\n   * @returns a subscription handle providing an `unsubscribe` method to stop the subscription.\n   */\n  subscribe(observer: ObserverLike<T>): {\n    unsubscribe: () => void;\n  };\n}\n\n/** A more cross-compatible version of the {@link GraphQLRequest} structure.\n * {@link FetchBody} for more details\n */\nexport type SubscriptionOperation = FetchBody;\n\n/** A subscription forwarding function, which must accept a {@link SubscriptionOperation}.\n *\n * @param operation - A {@link SubscriptionOperation}\n * @returns An {@link ObservableLike} object issuing {@link ExecutionResult | ExecutionResults}.\n */\nexport type SubscriptionForwarder = (\n  request: FetchBody,\n  operation: Operation\n) => ObservableLike<ExecutionResult>;\n\n/** This is called to create a subscription and needs to be hooked up to a transport client. */\nexport interface SubscriptionExchangeOpts {\n  /** A subscription forwarding function, which must accept a {@link SubscriptionOperation}.\n   *\n   * @param operation - A {@link SubscriptionOperation}\n   * @returns An {@link ObservableLike} object issuing {@link ExecutionResult | ExecutionResults}.\n   *\n   * @remarks\n   * This callback is called for each {@link Operation} that this `subscriptionExchange` will\n   * handle. It receives the {@link SubscriptionOperation}, which is a more compatible version\n   * of the raw {@link Operation} objects and must return an {@link ObservableLike} of results.\n   */\n  forwardSubscription: SubscriptionForwarder;\n\n  /** Flag to enable this exchange to handle all types of GraphQL operations.\n   *\n   * @remarks\n   * When you aren’t using fetch exchanges and GraphQL over HTTP as a transport for your GraphQL requests,\n   * or you have a third-party GraphQL transport implementation, which must also be used for queries and\n   * mutations, this flag may be used to allow this exchange to handle all kinds of GraphQL operations.\n   *\n   * By default, this flag is `false` and the exchange will only handle GraphQL subscription operations.\n   */\n  enableAllOperations?: boolean;\n\n  /** A predicate function that causes an operation to be handled by this `subscriptionExchange` if `true` is returned.\n   *\n   * @param operation - an {@link Operation}\n   * @returns true when the operation is handled by this exchange.\n   *\n   * @remarks\n   * In some cases, a `subscriptionExchange` will be used to only handle some {@link Operation | Operations},\n   * e.g. all that contain `@live` directive. For these cases, this function may be passed to precisely\n   * determine which `Operation`s this exchange should handle, instead of forwarding.\n   *\n   * When specified, the {@link SubscriptionExchangeOpts.enableAllOperations} flag is disregarded.\n   */\n  isSubscriptionOperation?: (operation: Operation) => boolean;\n}\n\n/** Generic subscription exchange factory used to either create an exchange handling just subscriptions or all operation kinds.\n *\n * @remarks\n * `subscriptionExchange` can be used to create an {@link Exchange} that either\n * handles just GraphQL subscription operations, or optionally all operations,\n * when the {@link SubscriptionExchangeOpts.enableAllOperations} flag is passed.\n *\n * The {@link SubscriptionExchangeOpts.forwardSubscription} function must\n * be provided and provides a generic input that's based on {@link Operation}\n * but is compatible with many libraries implementing GraphQL request or\n * subscription interfaces.\n */\nexport const subscriptionExchange =\n  ({\n    forwardSubscription,\n    enableAllOperations,\n    isSubscriptionOperation,\n  }: SubscriptionExchangeOpts): Exchange =>\n  ({ client, forward }) => {\n    const createSubscriptionSource = (\n      operation: Operation\n    ): Source<OperationResult> => {\n      const observableish = forwardSubscription(\n        makeFetchBody(operation),\n        operation\n      );\n\n      return make<OperationResult>(({ next, complete }) => {\n        let isComplete = false;\n        let sub: Subscription | void;\n        let result: OperationResult | void;\n\n        Promise.resolve().then(() => {\n          if (isComplete) return;\n\n          sub = observableish.subscribe({\n            next(nextResult) {\n              next(\n                (result = result\n                  ? mergeResultPatch(result, nextResult)\n                  : makeResult(operation, nextResult))\n              );\n            },\n            error(error) {\n              next(makeErrorResult(operation, error));\n            },\n            complete() {\n              if (!isComplete) {\n                isComplete = true;\n                if (operation.kind === 'subscription') {\n                  client.reexecuteOperation(\n                    makeOperation('teardown', operation, operation.context)\n                  );\n                }\n\n                if (result && result.hasNext)\n                  next(mergeResultPatch(result, { hasNext: false }));\n                complete();\n              }\n            },\n          });\n        });\n\n        return () => {\n          isComplete = true;\n          if (sub) sub.unsubscribe();\n        };\n      });\n    };\n    const isSubscriptionOperationFn =\n      isSubscriptionOperation ||\n      (operation => {\n        const { kind } = operation;\n        return (\n          kind === 'subscription' ||\n          (!!enableAllOperations && (kind === 'query' || kind === 'mutation'))\n        );\n      });\n\n    return ops$ => {\n      const subscriptionResults$ = pipe(\n        ops$,\n        filter(isSubscriptionOperationFn),\n        mergeMap(operation => {\n          const { key } = operation;\n          const teardown$ = pipe(\n            ops$,\n            filter(op => op.kind === 'teardown' && op.key === key)\n          );\n\n          return pipe(\n            createSubscriptionSource(operation),\n            takeUntil(teardown$)\n          );\n        })\n      );\n\n      const forward$ = pipe(\n        ops$,\n        filter(op => !isSubscriptionOperationFn(op)),\n        forward\n      );\n\n      return merge([subscriptionResults$, forward$]);\n    };\n  };\n","import { pipe, tap } from 'wonka';\nimport { Exchange } from '../types';\n\n/** Simple log debugger exchange.\n *\n * @remarks\n * An exchange that logs incoming {@link Operation | Operations} and\n * {@link OperationResult | OperationResults} in development.\n *\n * This exchange is a no-op in production and often used in issue reporting\n * to understand certain usage patterns of `urql` without having access to\n * the original source code.\n *\n * Hint: When you report an issue you’re having with `urql`, adding\n * this as your first exchange and posting its output can speed up\n * issue triaging a lot!\n */\nexport const debugExchange: Exchange = ({ forward }) => {\n  if (process.env.NODE_ENV === 'production') {\n    return ops$ => forward(ops$);\n  } else {\n    return ops$ =>\n      pipe(\n        ops$,\n        // eslint-disable-next-line no-console\n        tap(op => console.log('[Exchange debug]: Incoming operation: ', op)),\n        forward,\n        tap(result =>\n          // eslint-disable-next-line no-console\n          console.log('[Exchange debug]: Completed operation: ', result)\n        )\n      );\n  }\n};\n","import { Exchange } from '../types';\n\n/** Default deduplication exchange.\n * @deprecated\n * This exchange's functionality is now built into the {@link Client}.\n */\nexport const dedupExchange: Exchange =\n  ({ forward }) =>\n  ops$ =>\n    forward(ops$);\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, merge, mergeMap, pipe, takeUntil, onPush } from 'wonka';\n\nimport { Exchange } from '../types';\nimport {\n  makeFetchBody,\n  makeFetchURL,\n  makeFetchOptions,\n  makeFetchSource,\n} from '../internal';\n\n/** Default GraphQL over HTTP fetch exchange.\n *\n * @remarks\n * The default fetch exchange in `urql` supports sending GraphQL over HTTP\n * requests, can optionally send GraphQL queries as GET requests, and\n * handles incremental multipart responses.\n *\n * This exchange does not handle persisted queries or multipart uploads.\n * Support for the former can be added using `@urql/exchange-persisted-fetch`\n * and the latter using `@urql/exchange-multipart-fetch`.\n *\n * Hint: The `fetchExchange` and the two other exchanges all use the built-in fetch\n * utilities in `@urql/core/internal`, which you can also use to implement\n * a customized fetch exchange.\n *\n * @see {@link makeFetchSource} for the shared utility calling the Fetch API.\n */\nexport const fetchExchange: Exchange = ({ forward, dispatchDebug }) => {\n  return ops$ => {\n    const fetchResults$ = pipe(\n      ops$,\n      filter(operation => {\n        return (\n          operation.kind !== 'teardown' &&\n          (operation.kind !== 'subscription' ||\n            !!operation.context.fetchSubscriptions)\n        );\n      }),\n      mergeMap(operation => {\n        const body = makeFetchBody(operation);\n        const url = makeFetchURL(operation, body);\n        const fetchOptions = makeFetchOptions(operation, body);\n\n        dispatchDebug({\n          type: 'fetchRequest',\n          message: 'A fetch request is being executed.',\n          operation,\n          data: {\n            url,\n            fetchOptions,\n          },\n        });\n\n        const source = pipe(\n          makeFetchSource(operation, url, fetchOptions),\n          takeUntil(\n            pipe(\n              ops$,\n              filter(op => op.kind === 'teardown' && op.key === operation.key)\n            )\n          )\n        );\n\n        if (process.env.NODE_ENV !== 'production') {\n          return pipe(\n            source,\n            onPush(result => {\n              const error = !result.data ? result.error : undefined;\n\n              dispatchDebug({\n                type: error ? 'fetchError' : 'fetchSuccess',\n                message: `A ${\n                  error ? 'failed' : 'successful'\n                } fetch response has been returned.`,\n                operation,\n                data: {\n                  url,\n                  fetchOptions,\n                  value: error || result,\n                },\n              });\n            })\n          );\n        }\n\n        return source;\n      })\n    );\n\n    const forward$ = pipe(\n      ops$,\n      filter(operation => {\n        return (\n          operation.kind === 'teardown' ||\n          (operation.kind === 'subscription' &&\n            !operation.context.fetchSubscriptions)\n        );\n      }),\n      forward\n    );\n\n    return merge([fetchResults$, forward$]);\n  };\n};\n","import { share } from 'wonka';\nimport type { ExchangeIO, Exchange, ExchangeInput } from '../types';\n\n/** Composes an array of Exchanges into a single one.\n *\n * @param exchanges - An array of {@link Exchange | Exchanges}.\n * @returns - A composed {@link Exchange}.\n *\n * @remarks\n * `composeExchanges` returns an {@link Exchange} that when instantiated\n * composes the array of passed `Exchange`s into one, calling them from\n * right to left, with the prior `Exchange`’s {@link ExchangeIO} function\n * as the {@link ExchangeInput.forward} input.\n *\n * This simply merges all exchanges into one and is used by the {@link Client}\n * to merge the `exchanges` option it receives.\n *\n * @throws\n * In development, if {@link ExchangeInput.forward} is called repeatedly\n * by an {@link Exchange} an error is thrown, since `forward()` must only\n * be called once per `Exchange`.\n */\nexport const composeExchanges =\n  (exchanges: Exchange[]): Exchange =>\n  ({ client, forward, dispatchDebug }: ExchangeInput): ExchangeIO =>\n    exchanges.reduceRight((forward, exchange) => {\n      let forwarded = false;\n      return exchange({\n        client,\n        forward(operations$) {\n          if (process.env.NODE_ENV !== 'production') {\n            if (forwarded)\n              throw new Error(\n                'forward() must only be called once in each Exchange.'\n              );\n            forwarded = true;\n          }\n          return share(forward(share(operations$)));\n        },\n        dispatchDebug(event) {\n          dispatchDebug({\n            timestamp: Date.now(),\n            source: exchange.name,\n            ...event,\n          });\n        },\n      });\n    }, forward);\n","import { mergeMap, fromValue, fromPromise, pipe } from 'wonka';\nimport { Operation, OperationResult, Exchange } from '../types';\nimport { CombinedError } from '../utils';\n\n/** Options for the `mapExchange` allowing it to react to incoming operations, results, or errors. */\nexport interface MapExchangeOpts {\n  /** Accepts a callback for incoming `Operation`s.\n   *\n   * @param operation - An {@link Operation} that the {@link mapExchange} received.\n   * @returns optionally a new {@link Operation} replacing the original.\n   *\n   * @remarks\n   * You may return new {@link Operation | Operations} from this function replacing\n   * the original that the {@link mapExchange} received.\n   * It’s recommended that you use the {@link makeOperation} utility to create a copy\n   * of the original when you do this. (However, this isn’t required)\n   *\n   * Hint: The callback may also be promisified and return a new {@link Operation} asynchronously,\n   * provided you place your {@link mapExchange} after all synchronous {@link Exchange | Exchanges},\n   * like after your `cacheExchange`.\n   */\n  onOperation?(operation: Operation): Promise<Operation> | Operation | void;\n  /** Accepts a callback for incoming `OperationResult`s.\n   *\n   * @param result - An {@link OperationResult} that the {@link mapExchange} received.\n   * @returns optionally a new {@link OperationResult} replacing the original.\n   *\n   * @remarks\n   * This callback may optionally return a new {@link OperationResult} that replaces the original,\n   * which you can use to modify incoming API results.\n   *\n   * Hint: The callback may also be promisified and return a new {@link Operation} asynchronously,\n   * provided you place your {@link mapExchange} after all synchronous {@link Exchange | Exchanges},\n   * like after your `cacheExchange`.\n   */\n  onResult?(\n    result: OperationResult\n  ): Promise<OperationResult> | OperationResult | void;\n  /** Accepts a callback for incoming `CombinedError`s.\n   *\n   * @param error - A {@link CombinedError} that an incoming {@link OperationResult} contained.\n   * @param operation - The {@link Operation} of the incoming {@link OperationResult}.\n   *\n   * @remarks\n   * The callback may also be promisified and return a new {@link Operation} asynchronously,\n   * provided you place your {@link mapExchange} after all synchronous {@link Exchange | Exchanges},\n   * like after your `cacheExchange`.\n   */\n  onError?(error: CombinedError, operation: Operation): void;\n}\n\n/** Creates an `Exchange` mapping over incoming operations, results, and/or errors.\n *\n * @param opts - A {@link MapExchangeOpts} configuration object, containing the callbacks the `mapExchange` will use.\n * @returns the created {@link Exchange}\n *\n * @remarks\n * The `mapExchange` may be used to react to or modify incoming {@link Operation | Operations}\n * and {@link OperationResult | OperationResults}. Optionally, it can also modify these\n * asynchronously, when a promise is returned from the callbacks.\n *\n * This is useful to, for instance, add an authentication token to a given request, when\n * the `@urql/exchange-auth` package would be overkill.\n *\n * It can also accept an `onError` callback, which can be used to react to incoming\n * {@link CombinedError | CombinedErrors} on results, and trigger side-effects.\n *\n */\nexport const mapExchange = ({\n  onOperation,\n  onResult,\n  onError,\n}: MapExchangeOpts): Exchange => {\n  return ({ forward }) =>\n    ops$ => {\n      return pipe(\n        pipe(\n          ops$,\n          mergeMap(operation => {\n            const newOperation =\n              (onOperation && onOperation(operation)) || operation;\n            return 'then' in newOperation\n              ? fromPromise(newOperation)\n              : fromValue(newOperation);\n          })\n        ),\n        forward,\n        mergeMap(result => {\n          if (onError && result.error) onError(result.error, result.operation);\n          const newResult = (onResult && onResult(result)) || result;\n          return 'then' in newResult\n            ? fromPromise(newResult)\n            : fromValue(newResult);\n        })\n      );\n    };\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { ExchangeIO, ExchangeInput } from '../types';\n\n/** Used by the `Client` as the last exchange to warn about unhandled operations.\n *\n * @remarks\n * In a normal setup, some operations may go unhandled when a {@link Client} isn’t set up\n * with the right exchanges.\n * For instance, a `Client` may be missing a fetch exchange, or an exchange handling subscriptions.\n * This {@link Exchange} is added by the `Client` automatically to log warnings about unhandled\n * {@link Operaiton | Operations} in development.\n */\nexport const fallbackExchange: ({\n  dispatchDebug,\n}: Pick<ExchangeInput, 'dispatchDebug'>) => ExchangeIO =\n  ({ dispatchDebug }) =>\n  ops$ => {\n    if (process.env.NODE_ENV !== 'production') {\n      ops$ = pipe(\n        ops$,\n        tap(operation => {\n          if (\n            operation.kind !== 'teardown' &&\n            process.env.NODE_ENV !== 'production'\n          ) {\n            const message = `No exchange has handled operations of kind \"${operation.kind}\". Check whether you've added an exchange responsible for these operations.`;\n\n            dispatchDebug({\n              type: 'fallbackCatch',\n              message,\n              operation,\n            });\n            console.warn(message);\n          }\n        })\n      );\n    }\n\n    // All operations that skipped through the entire exchange chain should be filtered from the output\n    return filter((_x): _x is never => false)(ops$);\n  };\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport {\n  lazy,\n  filter,\n  makeSubject,\n  onEnd,\n  onPush,\n  onStart,\n  pipe,\n  share,\n  Source,\n  take,\n  takeUntil,\n  takeWhile,\n  publish,\n  subscribe,\n  switchMap,\n  fromValue,\n  merge,\n  map,\n  Subscription,\n} from 'wonka';\n\nimport { composeExchanges } from './exchanges';\nimport { fallbackExchange } from './exchanges/fallback';\n\nimport {\n  DocumentInput,\n  AnyVariables,\n  Exchange,\n  ExchangeInput,\n  GraphQLRequest,\n  Operation,\n  OperationInstance,\n  OperationContext,\n  OperationResult,\n  OperationResultSource,\n  OperationType,\n  RequestPolicy,\n  DebugEvent,\n} from './types';\n\nimport {\n  createRequest,\n  withPromise,\n  maskTypename,\n  noop,\n  makeOperation,\n  getOperationType,\n} from './utils';\n\n/** Configuration options passed when creating a new {@link Client}.\n *\n * @remarks\n * The `ClientOptions` are passed when creating a new {@link Client}, and\n * are used to instantiate the pipeline of {@link Exchange | Exchanges}, configure\n * options used to initialize {@link OperationContext | OperationContexts}, or to\n * change the general behaviour of the {@link Client}.\n */\nexport interface ClientOptions {\n  /** Target URL used by fetch exchanges to make GraphQL API requests to.\n   *\n   * @remarks\n   * This is the URL that fetch exchanges will call to make GraphQL API requests.\n   * This value is copied to {@link OperationContext.url}.\n   */\n  url: string;\n  /** Additional options used by fetch exchanges that'll be passed to the `fetch` call on API requests.\n   *\n   * @remarks\n   * The options in this object or an object returned by a callback function will be merged into the\n   * {@link RequestInit} options passed to the `fetch` call.\n   *\n   * Hint: If you're trying to implement more complex changes per {@link Operation}, it's worth considering\n   * to use the {@link mapExchange} instead, which allows you to change `Operation`s and `OperationResult`s.\n   *\n   * Hint: If you're trying to use this as a function for authentication, consider checking out\n   * `@urql/exchange-auth` instead, which allows you to handle refresh auth flows, and more\n   * complex auth flows.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch} for a description of this object.\n   */\n  fetchOptions?: RequestInit | (() => RequestInit);\n  /** A `fetch` function polyfill used by fetch exchanges to make API calls.\n   *\n   * @remarks\n   * This is the fetch polyfill used by any fetch exchange to make an API request. By default, when this\n   * option isn't set, any fetch exchange will attempt to use the globally available `fetch` function\n   * to make a request instead.\n   *\n   * It's recommended to only pass a polyfill, if any of the environments you're running the {@link Client}\n   * in don't support the Fetch API natively.\n   *\n   * Hint: If you're using the \"Incremental Delivery\" multipart spec, for instance with `@defer` directives,\n   * you're better off using the native `fetch` function, or must ensure that your polyfill supports streamed\n   * results. However, a \"Streaming requests unsupported\" error will be thrown, to let you know that your `fetch`\n   * API doesn't support incrementally streamed responses, if this mode is used.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n   */\n  fetch?: typeof fetch;\n  /** Allows a subscription to be executed using a `fetch` API request.\n   *\n   * @remarks\n   * If your API supports the `text/event-stream` and/or `multipart/mixed` response protocol, and you use\n   * this protocol to handle subscriptions, then you may switch this flag to `true`.\n   *\n   * This means you won’t have to create a {@link subscriptionExchange} to handle subscriptions with an\n   * external transport, and will instead be able to use GraphQL over HTTP transports.\n   */\n  fetchSubscriptions?: boolean;\n  /** A list of `Exchange`s that will be used to create the `Client`'s execution pipeline.\n   *\n   * @remarks\n   * The {@link Client} accepts and composes a list of {@link Exchange | Exchanges} into an “exchange pipeline”\n   * which receive a stream of {@link Operation | Operations} the `Client` wishes to execute, and return a stream\n   * of {@link OperationResult | OperationResults}.\n   *\n   * This is the basis for how `urql` handles GraphQL operations, and exchanges handle the creation, execution,\n   * and control flow of exchanges for the `Client`.\n   *\n   * To easily get started you should consider using the {@link dedupExchange}, {@link cacheExchange} and {@link fetchExchange}\n   * these are all exported from the core package.\n   *\n   * @see {@link https://urql.dev/goto/docs/architecture/#the-client-and-exchanges} for more information\n   * on what `Exchange`s are and how they work.\n   */\n  exchanges: Exchange[];\n  /** A configuration flag indicating whether support for \"Suspense\" is activated.\n   *\n   * @remarks\n   * This configuration flag is only relevant for using `urql` with the React or Preact bindings.\n   * When activated it allows `useQuery` to \"suspend\" instead of returning a loading state, which\n   * will stop updates in a querying component and instead cascade\n   * to a higher suspense boundary for a loading state.\n   *\n   * Hint: While, when this option is enabled, by default all `useQuery` hooks will suspense, you can\n   * disable Suspense selectively for each hook.\n   *\n   * @see {@link https://beta.reactjs.org/blog/2022/03/29/react-v18#new-suspense-features} for more information on React Suspense.\n   */\n  suspense?: boolean;\n  /** The request and caching strategy that all `Operation`s on this `Client` will use by default.\n   *\n   * @remarks\n   * The {@link RequestPolicy} instructs cache exchanges how to use and treat their cached results.\n   * By default `cache-first` is set and used, which will use cache results, and only make an API request\n   * on a cache miss.\n   *\n   * The `requestPolicy` can be overriden per operation, since it's added to the {@link OperationContext},\n   * which allows you to change the policy per `Operation`, rather than changing it by default here.\n   *\n   * Hint: We don’t recommend changing this from the default `cache-first` option, unless you know what\n   * you‘re doing. Setting this to `cache-and-network` is not recommend and may not lead to the behaviour\n   * you expect. If you’re looking to always update your cache frequently, use `@urql/exchange-request-policy`\n   * instead.\n   */\n  requestPolicy?: RequestPolicy;\n  /** Instructs fetch exchanges to use a GET request.\n   *\n   * @remarks\n   * This changes the {@link OperationContext.preferGetMethod} option, which tells fetch exchanges\n   * to use GET requests for queries instead of POST requests.\n   *\n   * When set to `true` or `'within-url-limit'`, built-in fetch exchanges will always attempt to send query\n   * operations as GET requests, unless the resulting URL exceeds a length of 2,048 characters.\n   * If you want to bypass this restriction, set this option to `'force'` instead, to always send GET.\n   * requests for queries.\n   */\n  preferGetMethod?: boolean | 'force' | 'within-url-limit';\n  /** Instructs the `Client` to remove `__typename` properties on all results.\n   *\n   * @remarks\n   * By default, cache exchanges will alter your GraphQL documents to request `__typename` fields\n   * for all selections. However, this means that your GraphQL data will now contain `__typename` fields you\n   * didn't ask for. This is why the {@link Client} supports “masking” this field by marking it\n   * as non-enumerable via this option.\n   *\n   * Only use this option if you absolutely have to. It's popular to model mutation inputs in\n   * GraphQL schemas after the object types they modify, and if you're using this option to make\n   * it possible to directly pass objects from results as inputs to your mutation variables, it's\n   * more performant and idomatic to instead create a new input object.\n   *\n   * Hint: With `@urql/exchange-graphcache` you will never need this option, as it selects fields on\n   * the client-side according to which fields you specified, rather than the fields it modified.\n   *\n   * @see {@link https://spec.graphql.org/October2021/#sec-Type-Name-Introspection} for more information\n   * on typename introspection via the `__typename` field.\n   */\n  maskTypename?: boolean;\n}\n\n/** The `Client` is the central hub for your GraphQL operations and holds `urql`'s state.\n *\n * @remarks\n * The `Client` manages your active GraphQL operations and their state, and contains the\n * {@link Exchange} pipeline to execute your GraphQL operations.\n *\n * It contains methods that allow you to execute GraphQL operations manually, but the `Client`\n * is also interacted with by bindings (for React, Preact, Vue, Svelte, etc) to execute GraphQL\n * operations.\n *\n * While {@link Exchange | Exchanges} are ultimately responsible for the control flow of operations,\n * sending API requests, and caching, the `Client` still has the important responsibility for\n * creating operations, managing consumers of active operations, sharing results for operations,\n * and more tasks as a “central hub”.\n *\n * @see {@link https://urql.dev/goto/docs/architecture/#requests-and-operations-on-the-client} for more information\n * on what the `Client` is and does.\n */\nexport interface Client {\n  new (options: ClientOptions): Client;\n\n  /** Exposes the stream of `Operation`s that is passed to the `Exchange` pipeline.\n   *\n   * @remarks\n   * This is a Wonka {@link Source} that issues the {@link Operation | Operations} going into\n   * the exchange pipeline.\n   * @internal\n   */\n  operations$: Source<Operation>;\n\n  /** Flag indicating whether support for “Suspense” is activated.\n   *\n   * @remarks\n   * This flag indicates whether support for “Suspense” has been activated via the\n   * {@link ClientOptions.suspense} flag.\n   *\n   * When this is enabled, the {@link Client} itself doesn’t function any differently, and the flag\n   * only serves as an instructions for the React/Preact bindings to change their behaviour.\n   *\n   * @see {@link ClientOptions.suspense} for more information.\n   * @internal\n   */\n  suspense: boolean;\n\n  /** Dispatches an `Operation` to the `Exchange` pipeline, if this `Operation` is active.\n   *\n   * @remarks\n   * This method is frequently used in {@link Exchange | Exchanges}, for instance caches, to reexecute\n   * an operation. It’s often either called because an `Operation` will need to be queried against the\n   * cache again, if a cache result has changed or been invalidated, or it’s called with an {@link Operation}'s\n   * {@link RequestPolicy} set to `network-only` to issue a network request.\n   *\n   * This method will only dispatch an {@link Operation} if it has active consumers, meaning,\n   * active subscribers to the sources of {@link OperationResult}. For instance, if no bindings\n   * (e.g. `useQuery`) is subscribed to the `Operation`, then `reexecuteOperation` will do nothing.\n   *\n   * All operations are put onto a queue and executed after a micro-tick. The queue of operations is\n   * emptied eagerly and synchronously, similar to a trampoline scheduler.\n   */\n  reexecuteOperation(operation: Operation): void;\n\n  /** Subscribe method to add an event listener to debug events.\n   *\n   * @param onEvent - A callback called with new debug events, each time an `Exchange` issues them.\n   * @returns A Wonka {@link Subscription} which is used to optionally terminate the event listener.\n   *\n   * @remarks\n   * This is a method that's only available in development, and allows the `urql-devtools` to receive\n   * to debug events that are issued by exchanges, giving the devtools more information about the flow\n   * and execution of {@link Operation | Operations}.\n   *\n   * @see {@link DebugEventTypes} for a description of all debug events.\n   * @internal\n   */\n  subscribeToDebugTarget?(onEvent: (event: DebugEvent) => void): Subscription;\n\n  /** Creates an `Operation` from a `GraphQLRequest` and optionally, overriding `OperationContext` options.\n   *\n   * @param kind - The {@link OperationType} of GraphQL operation, i.e. `query`, `mutation`, or `subscription`.\n   * @param request - A {@link GraphQLRequest} created prior to calling this method.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns An {@link Operation} created from the parameters.\n   *\n   * @remarks\n   * This method is expected to be called with a `kind` set to the `OperationType` of the GraphQL operation.\n   * In development, this is enforced by checking that the GraphQL document's operation matches this `kind`.\n   *\n   * Hint: While bindings will use this method combined with {@link Client.executeRequestOperation}, if\n   * you’re executing operations manually, you can use one of the other convenience methods instead.\n   *\n   * @see {@link Client.executeRequestOperation} for the method used to execute operations.\n   * @see {@link createRequest} which creates a `GraphQLRequest` from a `DocumentNode` and variables.\n   */\n  createRequestOperation<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables\n  >(\n    kind: OperationType,\n    request: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Operation<Data, Variables>;\n\n  /** Creates a `Source` that executes the `Operation` and issues `OperationResult`s for this `Operation`.\n   *\n   * @param operation - {@link Operation} that will be executed.\n   * @returns A Wonka {@link Source} of {@link OperationResult | OperationResults} for the passed `Operation`.\n   *\n   * @remarks\n   * The {@link Operation} will be dispatched to the pipeline of {@link Exchange | Exchanges} when\n   * subscribing to the returned {@link Source}, which issues {@link OperationResult | OperationResults}\n   * belonging to this `Operation`.\n   *\n   * Internally, {@link OperationResult | OperationResults} are filtered and deliverd to this source by\n   * comparing the {@link Operation.key} on the operation and the {@link OperationResult.operation}.\n   * For mutations, the {@link OperationContext._instance | `OperationContext._instance`} will additionally be compared, since two mutations\n   * with, even given the same variables, will have two distinct results and will be executed separately.\n   *\n   * The {@link Client} dispatches the {@link Operation} when we subscribe to the returned {@link Source}\n   * and will from then on consider the `Operation` as “active” until we unsubscribe. When all consumers unsubscribe\n   * from an `Operation` and it becomes “inactive” a `teardown` signal will be dispatched to the\n   * {@link Exchange | Exchanges}.\n   *\n   * Hint: While bindings will use this method, if you’re executing operations manually, you can use one\n   * of the other convenience methods instead, like {@link Client.executeQuery} et al.\n   */\n  executeRequestOperation<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables\n  >(\n    operation: Operation<Data, Variables>\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL query operation created from the passed parameters.\n   *\n   * @param query - a GraphQL document containing the query operation that will be executed.\n   * @param variables - the variables used to execute the operation.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link OperationResultSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.query` method is useful to programmatically create and issue a GraphQL query operation.\n   * It automatically calls {@link createRequest}, {@link client.createRequestOperation}, and\n   * {@link client.executeRequestOperation} for you, and is a convenience method.\n   *\n   * Since it returns a {@link OperationResultSource} it may be chained with a `toPromise()` call to only\n   * await a single result in an async function.\n   *\n   * Hint: This is the recommended way to create queries programmatically when not using the bindings,\n   * or when you’re trying to get a single, promisified result.\n   *\n   * @example\n   * ```ts\n   * const getBookQuery = gql`\n   *   query GetBook($id: ID!) {\n   *     book(id: $id) {\n   *       id\n   *       name\n   *       author {\n   *         name\n   *       }\n   *     }\n   *   }\n   * `;\n   *\n   * async function getBook(id) {\n   *   const result = await client.query(getBookQuery, { id }).toPromise();\n   *   if (result.error) {\n   *     throw result.error;\n   *   }\n   *\n   *   return result.data.book;\n   * }\n   * ```\n   */\n  query<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Returns the first synchronous result a `Client` provides for a given operation.\n   *\n   * @param query - a GraphQL document containing the query operation that will be executed.\n   * @param variables - the variables used to execute the operation.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns An {@link OperationResult} if one became available synchronously or `null`.\n   *\n   * @remarks\n   * The `Client.readQuery` method returns a result synchronously or defaults to `null`. This is useful\n   * as it limits the result for a query operation to whatever the cache {@link Exchange} of a {@link Client}\n   * had stored and available at that moment.\n   *\n   * In `urql`, it's expected that cache exchanges return their results synchronously. The bindings\n   * and this method exploit this by using synchronous results, like these, to check what data is already\n   * in the cache.\n   *\n   * This method is similar to what all bindings do to synchronously provide the initial state for queries,\n   * regardless of whether effects afterwards that subscribe to the query operation update this state synchronously\n   * or asynchronously.\n   */\n  readQuery<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResult<Data, Variables> | null;\n\n  /** Creates a `Source` that executes the GraphQL query operation for the passed `GraphQLRequest`.\n   *\n   * @param query - a {@link GraphQLRequest}\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link PromisifiedSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.executeQuery` method is used to programmatically issue a GraphQL query operation.\n   * It automatically calls {@link client.createRequestOperation} and {@link client.executeRequestOperation} for you,\n   * but requires you to create a {@link GraphQLRequest} using {@link createRequest} yourself first.\n   *\n   * @see {@link Client.query} for a method that doesn't require calling {@link createRequest} yourself.\n   */\n  executeQuery<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL subscription operation created from the passed parameters.\n   *\n   * @param query - a GraphQL document containing the subscription operation that will be executed.\n   * @param variables - the variables used to execute the operation.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A Wonka {@link Source} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.subscription` method is useful to programmatically create and issue a GraphQL subscription operation.\n   * It automatically calls {@link createRequest}, {@link client.createRequestOperation}, and\n   * {@link client.executeRequestOperation} for you, and is a convenience method.\n   *\n   * Hint: This is the recommended way to create subscriptions programmatically when not using the bindings.\n   *\n   * @example\n   * ```ts\n   * import { pipe, subscribe } from 'wonka';\n   *\n   * const getNewsSubscription = gql`\n   *   subscription GetNews {\n   *     breakingNews {\n   *       id\n   *       text\n   *       createdAt\n   *     }\n   *   }\n   * `;\n   *\n   * function subscribeToBreakingNews() {\n   *   const subscription = pipe(\n   *     client.subscription(getNewsSubscription, {}),\n   *     subscribe(result => {\n   *       if (result.data) {\n   *         console.log(result.data.breakingNews.text);\n   *       }\n   *     })\n   *   );\n   *\n   *   return subscription.unsubscribe;\n   * }\n   * ```\n   */\n  subscription<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL subscription operation for the passed `GraphQLRequest`.\n   *\n   * @param query - a {@link GraphQLRequest}\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link PromisifiedSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.executeSubscription` method is used to programmatically issue a GraphQL subscription operation.\n   * It automatically calls {@link client.createRequestOperation} and {@link client.executeRequestOperation} for you,\n   * but requires you to create a {@link GraphQLRequest} using {@link createRequest} yourself first.\n   *\n   * @see {@link Client.subscription} for a method that doesn't require calling {@link createRequest} yourself.\n   */\n  executeSubscription<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables\n  >(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL mutation operation created from the passed parameters.\n   *\n   * @param query - a GraphQL document containing the mutation operation that will be executed.\n   * @param variables - the variables used to execute the operation.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link PromisifiedSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.mutation` method is useful to programmatically create and issue a GraphQL mutation operation.\n   * It automatically calls {@link createRequest}, {@link client.createRequestOperation}, and\n   * {@link client.executeRequestOperation} for you, and is a convenience method.\n   *\n   * Since it returns a {@link PromisifiedSource} it may be chained with a `toPromise()` call to only\n   * await a single result in an async function. Since mutations will only typically issue one result,\n   * using this method is recommended.\n   *\n   * Hint: This is the recommended way to create mutations programmatically when not using the bindings,\n   * or when you’re trying to get a single, promisified result.\n   *\n   * @example\n   * ```ts\n   * const createPostMutation = gql`\n   *   mutation CreatePost($text: String!) {\n   *     createPost(text: $text) {\n   *       id\n   *       text\n   *     }\n   *   }\n   * `;\n   *\n   * async function createPost(text) {\n   *   const result = await client.mutation(createPostMutation, {\n   *     text,\n   *   }).toPromise();\n   *   if (result.error) {\n   *     throw result.error;\n   *   }\n   *\n   *   return result.data.createPost;\n   * }\n   * ```\n   */\n  mutation<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL mutation operation for the passed `GraphQLRequest`.\n   *\n   * @param query - a {@link GraphQLRequest}\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link PromisifiedSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.executeMutation` method is used to programmatically issue a GraphQL mutation operation.\n   * It automatically calls {@link client.createRequestOperation} and {@link client.executeRequestOperation} for you,\n   * but requires you to create a {@link GraphQLRequest} using {@link createRequest} yourself first.\n   *\n   * @see {@link Client.mutation} for a method that doesn't require calling {@link createRequest} yourself.\n   */\n  executeMutation<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n}\n\nexport const Client: new (opts: ClientOptions) => Client = function Client(\n  this: Client | {},\n  opts: ClientOptions\n) {\n  if (process.env.NODE_ENV !== 'production' && !opts.url) {\n    throw new Error('You are creating an urql-client without a url.');\n  }\n\n  let ids = 0;\n\n  const replays = new Map<number, OperationResult>();\n  const active: Map<number, Source<OperationResult>> = new Map();\n  const dispatched = new Set<number>();\n  const queue: Operation[] = [];\n\n  const baseOpts = {\n    url: opts.url,\n    fetchOptions: opts.fetchOptions,\n    fetch: opts.fetch,\n    preferGetMethod: !!opts.preferGetMethod,\n    requestPolicy: opts.requestPolicy || 'cache-first',\n  };\n\n  // This subject forms the input of operations; executeOperation may be\n  // called to dispatch a new operation on the subject\n  const operations = makeSubject<Operation>();\n\n  function nextOperation(operation: Operation) {\n    const prevReplay = replays.get(operation.key);\n    if (\n      operation.kind === 'mutation' ||\n      operation.kind === 'teardown' ||\n      (prevReplay ? !prevReplay.hasNext : !dispatched.has(operation.key))\n    ) {\n      if (operation.kind === 'teardown') {\n        dispatched.delete(operation.key);\n      } else if (operation.kind !== 'mutation') {\n        dispatched.add(operation.key);\n      }\n      operations.next(operation);\n    }\n  }\n\n  // We define a queued dispatcher on the subject, which empties the queue when it's\n  // activated to allow `reexecuteOperation` to be trampoline-scheduled\n  let isOperationBatchActive = false;\n  function dispatchOperation(operation?: Operation | void) {\n    if (operation) nextOperation(operation);\n\n    if (!isOperationBatchActive) {\n      isOperationBatchActive = true;\n      while (isOperationBatchActive && (operation = queue.shift()))\n        nextOperation(operation);\n      isOperationBatchActive = false;\n    }\n  }\n\n  /** Defines how result streams are created */\n  const makeResultSource = (operation: Operation) => {\n    let result$ = pipe(\n      results$,\n      // Filter by matching key (or _instance if it’s set)\n      filter(\n        (res: OperationResult) =>\n          res.operation.kind === operation.kind &&\n          res.operation.key === operation.key &&\n          (!res.operation.context._instance ||\n            res.operation.context._instance === operation.context._instance)\n      ),\n      // End the results stream when an active teardown event is sent\n      takeUntil(\n        pipe(\n          operations.source,\n          filter(op => op.kind === 'teardown' && op.key === operation.key)\n        )\n      )\n    );\n\n    if (operation.kind !== 'query') {\n      // Interrupt subscriptions and mutations when they have no more results\n      result$ = pipe(\n        result$,\n        takeWhile(result => !!result.hasNext, true)\n      );\n    } else {\n      result$ = pipe(\n        result$,\n        // Add `stale: true` flag when a new operation is sent for queries\n        switchMap(result => {\n          const value$ = fromValue(result);\n          return result.stale || result.hasNext\n            ? value$\n            : merge([\n                value$,\n                pipe(\n                  operations.source,\n                  filter(op => op.key === operation.key),\n                  take(1),\n                  map(() => {\n                    result.stale = true;\n                    return result;\n                  })\n                ),\n              ]);\n        })\n      );\n    }\n\n    if (operation.kind !== 'mutation') {\n      result$ = pipe(\n        result$,\n        // Store replay result\n        onPush(result => {\n          dispatched.delete(operation.key);\n          replays.set(operation.key, result);\n        }),\n        // Cleanup active states on end of source\n        onEnd(() => {\n          // Delete the active operation handle\n          dispatched.delete(operation.key);\n          replays.delete(operation.key);\n          active.delete(operation.key);\n          // Interrupt active queue\n          isOperationBatchActive = false;\n          // Delete all queued up operations of the same key on end\n          for (let i = queue.length - 1; i >= 0; i--)\n            if (queue[i].key === operation.key) queue.splice(i, 1);\n          // Dispatch a teardown signal for the stopped operation\n          nextOperation(\n            makeOperation('teardown', operation, operation.context)\n          );\n        })\n      );\n    } else {\n      result$ = pipe(\n        result$,\n        // Send mutation operation on start\n        onStart(() => {\n          nextOperation(operation);\n        })\n      );\n    }\n\n    // Mask typename properties if the option for it is turned on\n    if (opts.maskTypename) {\n      result$ = pipe(\n        result$,\n        map(res => ({ ...res, data: maskTypename(res.data, true) }))\n      );\n    }\n\n    return share(result$);\n  };\n\n  const instance: Client =\n    this instanceof Client ? this : Object.create(Client.prototype);\n  const client: Client = Object.assign(instance, {\n    suspense: !!opts.suspense,\n    operations$: operations.source,\n\n    reexecuteOperation(operation: Operation) {\n      // Reexecute operation only if any subscribers are still subscribed to the\n      // operation's exchange results\n      if (operation.kind === 'mutation' || active.has(operation.key)) {\n        queue.push(operation);\n        Promise.resolve().then(dispatchOperation);\n      }\n    },\n\n    createRequestOperation(kind, request, opts) {\n      if (!opts) opts = {};\n\n      let requestOperationType: string | undefined;\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        kind !== 'teardown' &&\n        (requestOperationType = getOperationType(request.query)) !== kind\n      ) {\n        throw new Error(\n          `Expected operation of type \"${kind}\" but found \"${requestOperationType}\"`\n        );\n      }\n\n      return makeOperation(kind, request, {\n        _instance:\n          kind === 'mutation'\n            ? ((ids = (ids + 1) | 0) as OperationInstance)\n            : undefined,\n        ...baseOpts,\n        ...opts,\n        requestPolicy: opts.requestPolicy || baseOpts.requestPolicy,\n        suspense: opts.suspense || (opts.suspense !== false && client.suspense),\n      });\n    },\n\n    executeRequestOperation(operation) {\n      if (operation.kind === 'mutation') {\n        return withPromise(makeResultSource(operation));\n      }\n\n      return withPromise(\n        lazy<OperationResult>(() => {\n          let source = active.get(operation.key);\n          if (!source) {\n            active.set(operation.key, (source = makeResultSource(operation)));\n          }\n\n          source = pipe(\n            source,\n            onStart(() => {\n              dispatchOperation(operation);\n            })\n          );\n\n          const replay = replays.get(operation.key);\n          if (\n            operation.kind === 'query' &&\n            replay &&\n            (replay.stale || replay.hasNext)\n          ) {\n            return pipe(\n              merge([\n                source,\n                pipe(\n                  fromValue(replay),\n                  filter(replay => replay === replays.get(operation.key))\n                ),\n              ]),\n              switchMap(fromValue)\n            );\n          } else {\n            return source;\n          }\n        })\n      );\n    },\n\n    executeQuery(query, opts) {\n      const operation = client.createRequestOperation('query', query, opts);\n      return client.executeRequestOperation(operation);\n    },\n\n    executeSubscription(query, opts) {\n      const operation = client.createRequestOperation(\n        'subscription',\n        query,\n        opts\n      );\n      return client.executeRequestOperation(operation);\n    },\n\n    executeMutation(query, opts) {\n      const operation = client.createRequestOperation('mutation', query, opts);\n      return client.executeRequestOperation(operation);\n    },\n\n    readQuery(query, variables, context) {\n      let result: OperationResult | null = null;\n\n      pipe(\n        client.query(query, variables, context),\n        subscribe(res => {\n          result = res;\n        })\n      ).unsubscribe();\n\n      return result;\n    },\n\n    query(query, variables, context) {\n      return client.executeQuery(createRequest(query, variables), context);\n    },\n\n    subscription(query, variables, context) {\n      return client.executeSubscription(\n        createRequest(query, variables),\n        context\n      );\n    },\n\n    mutation(query, variables, context) {\n      return client.executeMutation(createRequest(query, variables), context);\n    },\n  } as Client);\n\n  let dispatchDebug: ExchangeInput['dispatchDebug'] = noop;\n  if (process.env.NODE_ENV !== 'production') {\n    const { next, source } = makeSubject<DebugEvent>();\n    client.subscribeToDebugTarget = (onEvent: (e: DebugEvent) => void) =>\n      pipe(source, subscribe(onEvent));\n    dispatchDebug = next as ExchangeInput['dispatchDebug'];\n  }\n\n  // All exchange are composed into a single one and are called using the constructed client\n  // and the fallback exchange stream\n  const composedExchange = composeExchanges(opts.exchanges);\n\n  // All exchanges receive inputs using which they can forward operations to the next exchange\n  // and receive a stream of results in return, access the client, or dispatch debugging events\n  // All operations then run through the Exchange IOs in a pipeline-like fashion\n  const results$ = share(\n    composedExchange({\n      client,\n      dispatchDebug,\n      forward: fallbackExchange({ dispatchDebug }),\n    })(operations.source)\n  );\n\n  // Prevent the `results$` exchange pipeline from being closed by active\n  // cancellations cascading up from components\n  pipe(results$, publish);\n\n  return client;\n} as any;\n\n/** Accepts `ClientOptions` and creates a `Client`.\n * @param opts - A {@link ClientOptions} objects with options for the `Client`.\n * @returns A {@link Client} instantiated with `opts`.\n */\nexport const createClient = Client as any as (opts: ClientOptions) => Client;\n"],"names":["collectTypes","obj","types","Array","isArray","item","key","add","collectTypesFromResponse","response","Set","formatNode","node","hasChanged","definitions","definition","newDefinition","push","selections","hasTypename","kind","Kind","OPERATION_DEFINITION","selectionSet","selection","FIELD","name","value","alias","newSelection","NAME","formattedDocs","Map","formatDocument","query","keyDocument","result","get","__key","set","Object","defineProperty","enumerable","maskTypename","data","isRoot","map","d","acc","__typename","withPromise","_source$","source$","sink","toPromise","take","filter","stale","hasNext","then","onResolve","onReject","subscribe","onResult","makeOperation","request","context","addMetadata","operation","meta","noop","gql","parts","fragmentNames","source","body","i","arguments","length","unshift","document","FRAGMENT_DEFINITION","stringifyDocument","has","process","env","NODE_ENV","console","warn","DOCUMENT","shouldSkip","cacheExchange","forward","client","dispatchDebug","resultCache","operationCache","mapTypeNames","formattedOperation","isOperationCached","requestPolicy","ops$","cachedOps$","cachedResult","type","message","undefined","cacheOutcome","reexecuteOperation","op","forwardedOps$","tap","typenames","concat","additionalTypenames","pendingOperations","typeName","operations","values","clear","delete","merge","serializeResult","includeExtensions","serialized","JSON","stringify","extensions","error","graphQLErrors","path","networkError","deserializeResult","parse","CombinedError","Error","revalidated","ssrExchange","params","staleWhileRevalidate","invalidateQueue","invalidate","Promise","resolve","shift","ssr","isClient","suspense","restoreData","restore","extractData","initialState","subscriptionExchange","forwardSubscription","enableAllOperations","isSubscriptionOperation","createSubscriptionSource","observableish","makeFetchBody","make","next","complete","isComplete","sub","nextResult","mergeResultPatch","makeResult","makeErrorResult","unsubscribe","isSubscriptionOperationFn","subscriptionResults$","mergeMap","teardown$","takeUntil","forward$","debugExchange","log","dedupExchange","fetchExchange","fetchResults$","url","makeFetchURL","fetchOptions","makeFetchOptions","makeFetchSource","onPush","fetchSubscriptions","composeExchanges","exchanges","reduceRight","exchange","forwarded","operations$","share","event","timestamp","Date","now","mapExchange","onOperation","onError","newResult","fromPromise","fromValue","newOperation","fallbackExchange","_x","Client","opts","ids","replays","active","dispatched","queue","baseOpts","fetch","preferGetMethod","makeSubject","nextOperation","prevReplay","isOperationBatchActive","dispatchOperation","makeResultSource","result$","res","_instance","results$","takeWhile","switchMap","value$","onEnd","splice","onStart","instance","create","prototype","assign","createRequestOperation","requestOperationType","getOperationType","executeRequestOperation","lazy","replay","executeQuery","executeSubscription","executeMutation","readQuery","variables","createRequest","subscription","mutation","subscribeToDebugTarget","onEvent","composedExchange","publish","createClient"],"mappings":"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"}