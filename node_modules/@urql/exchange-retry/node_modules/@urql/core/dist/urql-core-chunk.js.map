{"version":3,"file":"urql-core-chunk.js","sources":["../src/utils/error.ts","../src/utils/hash.ts","../src/utils/variables.ts","../src/utils/request.ts","../src/utils/result.ts","../src/internal/fetchOptions.ts","../src/internal/fetchSource.ts"],"sourcesContent":["import { GraphQLError } from '@0no-co/graphql.web';\nimport { ErrorLike } from '../types';\n\nconst generateErrorMessage = (\n  networkErr?: Error,\n  graphQlErrs?: GraphQLError[]\n) => {\n  let error = '';\n  if (networkErr) return `[Network] ${networkErr.message}`;\n  if (graphQlErrs) {\n    for (const err of graphQlErrs) {\n      if (error) error += '\\n';\n      error += `[GraphQL] ${err.message}`;\n    }\n  }\n  return error;\n};\n\nconst rehydrateGraphQlError = (error: any): GraphQLError => {\n  if (\n    error &&\n    error.message &&\n    (error.extensions || error.name === 'GraphQLError')\n  ) {\n    return error;\n  } else if (typeof error === 'object' && error.message) {\n    return new GraphQLError(\n      error.message,\n      error.nodes,\n      error.source,\n      error.positions,\n      error.path,\n      error,\n      error.extensions || {}\n    );\n  } else {\n    return new GraphQLError(error as any);\n  }\n};\n\n/** An abstracted `Error` that provides either a `networkError` or `graphQLErrors`.\n *\n * @remarks\n * During a GraphQL request, either the request can fail entirely, causing a network error,\n * or the GraphQL execution or fields can fail, which will cause an {@link ExecutionResult}\n * to contain an array of GraphQL errors.\n *\n * The `CombinedError` abstracts and normalizes both failure cases. When {@link OperationResult.error}\n * is set to this error, the `CombinedError` abstracts all errors, making it easier to handle only\n * a subset of error cases.\n *\n * @see {@link https://urql.dev/goto/docs/basics/errors} for more information on handling\n * GraphQL errors and the `CombinedError`.\n */\nexport class CombinedError extends Error {\n  public name: string;\n  public message: string;\n\n  /** A list of GraphQL errors rehydrated from a {@link ExecutionResult}.\n   *\n   * @remarks\n   * If an {@link ExecutionResult} received from the API contains a list of errors,\n   * the `CombinedError` will rehydrate them, normalize them to\n   * {@link GraphQLError | GraphQLErrors} and list them here.\n   * An empty list indicates that no GraphQL error has been sent by the API.\n   */\n  public graphQLErrors: GraphQLError[];\n\n  /** Set to an error, if a GraphQL request has failed outright.\n   *\n   * @remarks\n   * A GraphQL over HTTP request may fail and not reach the API. Any error that\n   * prevents a GraphQl request outright, will be considered a “network error” and\n   * set here.\n   */\n  public networkError?: Error;\n\n  /** Set to the {@link Response} object a fetch exchange received.\n   *\n   * @remarks\n   * If a built-in fetch {@link Exchange} is used in `urql`, this may\n   * be set to the {@link Response} object of the Fetch API response.\n   * However, since `urql` doesn’t assume that all users will use HTTP\n   * as the only or exclusive transport for GraphQL this property is\n   * neither typed nor guaranteed and may be re-used for other purposes\n   * by non-fetch exchanges.\n   *\n   * Hint: It can be useful to use `response.status` here, however, if\n   * you plan on relying on this being a {@link Response} in your app,\n   * which it is by default, then make sure you add some extra checks\n   * before blindly assuming so!\n   */\n  public response?: any;\n\n  constructor(input: {\n    networkError?: Error;\n    graphQLErrors?: Array<string | ErrorLike>;\n    response?: any;\n  }) {\n    const normalizedGraphQLErrors = (input.graphQLErrors || []).map(\n      rehydrateGraphQlError\n    );\n    const message = generateErrorMessage(\n      input.networkError,\n      normalizedGraphQLErrors\n    );\n\n    super(message);\n\n    this.name = 'CombinedError';\n    this.message = message;\n    this.graphQLErrors = normalizedGraphQLErrors;\n    this.networkError = input.networkError;\n    this.response = input.response;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n","/** A hash value as computed by {@link phash}.\n *\n * @remarks\n * Typically `HashValue`s are used as hashes and keys of GraphQL documents,\n * variables, and combined, for GraphQL requests.\n */\nexport type HashValue = number & {\n  /** Marker to indicate that a `HashValue` may not be created by a user.\n   *\n   * @remarks\n   * `HashValue`s are created by {@link phash} and are marked as such to not mix them\n   * up with other numbers and prevent them from being created or used outside of this\n   * hashing function.\n   *\n   * @internal\n   */\n  readonly _opaque: unique symbol;\n};\n\n/** Computes a djb2 hash of the given string.\n *\n * @param x - the string to be hashed\n * @param seed - optionally a prior hash for progressive hashing\n * @returns a hash value, i.e. a number\n *\n * @remark\n * This is the hashing function used throughout `urql`, primarily to compute\n * {@link Operation.key}.\n *\n * @see {@link http://www.cse.yorku.ca/~oz/hash.html#djb2} for a further description of djb2.\n */\nexport const phash = (x: string, seed?: HashValue): HashValue => {\n  let h = (seed || 5381) | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++)\n    h = (h << 5) + h + x.charCodeAt(i);\n  return h as HashValue;\n};\n","export type FileMap = Map<string, File | Blob>;\n\nconst seen = new Set();\nconst cache = new WeakMap();\n\nconst stringify = (x: any): string => {\n  if (x === null || seen.has(x)) {\n    return 'null';\n  } else if (typeof x !== 'object') {\n    return JSON.stringify(x) || '';\n  } else if (x.toJSON) {\n    return stringify(x.toJSON());\n  } else if (Array.isArray(x)) {\n    let out = '[';\n    for (const value of x) {\n      if (out.length > 1) out += ',';\n      out += stringify(value) || 'null';\n    }\n    out += ']';\n    return out;\n  }\n\n  const keys = Object.keys(x).sort();\n  if (!keys.length && x.constructor && x.constructor !== Object) {\n    const key = cache.get(x) || Math.random().toString(36).slice(2);\n    cache.set(x, key);\n    return stringify({ __key: key });\n  }\n\n  seen.add(x);\n  let out = '{';\n  for (const key of keys) {\n    const value = stringify(x[key]);\n    if (value) {\n      if (out.length > 1) out += ',';\n      out += stringify(key) + ':' + value;\n    }\n  }\n\n  seen.delete(x);\n  out += '}';\n  return out;\n};\n\nconst extract = (map: FileMap, path: string, x: any) => {\n  if (x == null || typeof x !== 'object' || x.toJSON || seen.has(x)) {\n    /*noop*/\n  } else if (Array.isArray(x)) {\n    for (let i = 0, l = x.length; i < l; i++)\n      extract(map, `${path}.${i}`, x[i]);\n  } else if (x instanceof FileConstructor || x instanceof BlobConstructor) {\n    map.set(path, x as File | Blob);\n  } else {\n    seen.add(x);\n    for (const key of Object.keys(x)) extract(map, `${path}.${key}`, x[key]);\n  }\n};\n\n/** A stable stringifier for GraphQL variables objects.\n *\n * @param x - any JSON-like data.\n * @return A JSON string.\n *\n * @remarks\n * This utility creates a stable JSON string from any passed data,\n * and protects itself from throwing.\n *\n * The JSON string is stable insofar as objects’ keys are sorted,\n * and instances of non-plain objects are replaced with random keys\n * replacing their values, which remain stable for the objects’\n * instance.\n */\nexport const stringifyVariables = (x: any): string => {\n  seen.clear();\n  return stringify(x);\n};\n\nclass NoopConstructor {}\nconst FileConstructor = typeof File !== 'undefined' ? File : NoopConstructor;\nconst BlobConstructor = typeof Blob !== 'undefined' ? Blob : NoopConstructor;\n\nexport const extractFiles = (x: any): FileMap => {\n  const map: FileMap = new Map();\n  if (\n    FileConstructor !== NoopConstructor ||\n    BlobConstructor !== NoopConstructor\n  ) {\n    seen.clear();\n    extract(map, 'variables', x);\n  }\n  return map;\n};\n","import { Kind, parse, print } from '@0no-co/graphql.web';\nimport type { DocumentNode, DefinitionNode } from './graphql';\nimport { HashValue, phash } from './hash';\nimport { stringifyVariables } from './variables';\n\nimport type {\n  DocumentInput,\n  TypedDocumentNode,\n  AnyVariables,\n  GraphQLRequest,\n  RequestExtensions,\n} from '../types';\n\n/** A `DocumentNode` annotated with its hashed key.\n * @internal\n */\nexport type KeyedDocumentNode = TypedDocumentNode & {\n  __key: HashValue;\n};\n\nconst SOURCE_NAME = 'gql';\nconst GRAPHQL_STRING_RE = /(\"{3}[\\s\\S]*\"{3}|\"(?:\\\\.|[^\"])*\")/g;\nconst REPLACE_CHAR_RE = /(?:#[^\\n\\r]+)?(?:[\\r\\n]+|$)/g;\n\nconst replaceOutsideStrings = (str: string, idx: number) =>\n  idx % 2 === 0 ? str.replace(REPLACE_CHAR_RE, '\\n') : str;\n\n/** Sanitizes a GraphQL document string by replacing comments and redundant newlines in it. */\nconst sanitizeDocument = (node: string): string =>\n  node.split(GRAPHQL_STRING_RE).map(replaceOutsideStrings).join('').trim();\n\nconst prints = new Map<DocumentNode | DefinitionNode, string>();\nconst docs = new Map<HashValue, KeyedDocumentNode>();\n\n/** A cached printing function for GraphQL documents.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A normalized printed string of the passed GraphQL document.\n *\n * @remarks\n * This function accepts a GraphQL query string or {@link DocumentNode},\n * then prints and sanitizes it. The sanitizer takes care of removing\n * comments, which otherwise alter the key of the document although the\n * document is otherwise equivalent to another.\n *\n * When a {@link DocumentNode} is passed to this function, it caches its\n * output by modifying the `loc.source.body` property on the GraphQL node.\n */\nexport const stringifyDocument = (\n  node: string | DefinitionNode | DocumentNode\n): string => {\n  let printed: string;\n  if (typeof node === 'string') {\n    printed = sanitizeDocument(node);\n  } else if (node.loc && docs.get((node as KeyedDocumentNode).__key) === node) {\n    printed = node.loc.source.body;\n  } else {\n    printed = prints.get(node) || sanitizeDocument(print(node));\n    prints.set(node, printed);\n  }\n\n  if (typeof node !== 'string' && !node.loc) {\n    (node as any).loc = {\n      start: 0,\n      end: printed.length,\n      source: {\n        body: printed,\n        name: SOURCE_NAME,\n        locationOffset: { line: 1, column: 1 },\n      },\n    };\n  }\n\n  return printed;\n};\n\n/** Computes the hash for a document's string using {@link stringifyDocument}'s output.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link HashValue}\n *\n * @privateRemarks\n * This function adds the operation name of the document to the hash, since sometimes\n * a merged document with multiple operations may be used. Although `urql` requires a\n * `DocumentNode` to only contain a single operation, when the cached `loc.source.body`\n * of a `DocumentNode` is used, this string may still contain multiple operations and\n * the resulting hash should account for only one at a time.\n */\nconst hashDocument = (\n  node: string | DefinitionNode | DocumentNode\n): HashValue => {\n  let key = phash(stringifyDocument(node));\n  // Add the operation name to the produced hash\n  if ((node as DocumentNode).definitions) {\n    const operationName = getOperationName(node as DocumentNode);\n    if (operationName) key = phash(`\\n# ${operationName}`, key);\n  }\n  return key;\n};\n\n/** Returns a canonical version of the passed `DocumentNode` with an added hash key.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link KeyedDocumentNode}\n *\n * @remarks\n * `urql` will always avoid unnecessary work, no matter whether a user passes `DocumentNode`s\n * or strings of GraphQL documents to its APIs.\n *\n * This function will return a canonical version of a {@link KeyedDocumentNode} no matter\n * which kind of input is passed, avoiding parsing or hashing of passed data as needed.\n */\nexport const keyDocument = (node: string | DocumentNode): KeyedDocumentNode => {\n  let key: HashValue;\n  let query: DocumentNode;\n  if (typeof node === 'string') {\n    key = hashDocument(node);\n    query = docs.get(key) || parse(node, { noLocation: true });\n  } else {\n    key = (node as KeyedDocumentNode).__key || hashDocument(node);\n    query = docs.get(key) || node;\n  }\n\n  // Add location information if it's missing\n  if (!query.loc) stringifyDocument(query);\n\n  (query as KeyedDocumentNode).__key = key;\n  docs.set(key, query as KeyedDocumentNode);\n  return query as KeyedDocumentNode;\n};\n\n/** Creates a `GraphQLRequest` from the passed parameters.\n *\n * @param q - A string of a document or a {@link DocumentNode}\n * @param variables - A variables object for the defined GraphQL operation.\n * @returns A {@link GraphQLRequest}\n *\n * @remarks\n * `createRequest` creates a {@link GraphQLRequest} from the passed parameters,\n * while replacing the document as needed with a canonical version of itself,\n * to avoid parsing, printing, or hashing the same input multiple times.\n *\n * If no variables are passed, canonically it'll default to an empty object,\n * which is removed from the resulting hash key.\n */\nexport const createRequest = <\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(\n  _query: DocumentInput<Data, Variables>,\n  _variables: Variables,\n  extensions?: RequestExtensions | undefined\n): GraphQLRequest<Data, Variables> => {\n  const variables = _variables || ({} as Variables);\n  const query = keyDocument(_query);\n  const printedVars = stringifyVariables(variables);\n  let key = query.__key;\n  if (printedVars !== '{}') key = phash(printedVars, key);\n  return { key, query, variables, extensions };\n};\n\n/** Returns the name of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's name contained within the document, or `undefined`\n */\nexport const getOperationName = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.name ? node.name.value : undefined;\n    }\n  }\n};\n\n/** Returns the type of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's type contained within the document, or `undefined`\n */\nexport const getOperationType = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.operation;\n    }\n  }\n};\n","import {\n  ExecutionResult,\n  Operation,\n  OperationResult,\n  IncrementalPayload,\n} from '../types';\nimport { CombinedError } from './error';\n\n/** Converts the `ExecutionResult` received for a given `Operation` to an `OperationResult`.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param result - The GraphQL API’s {@link ExecutionResult}.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n *\n * @throws\n * If no data, or errors are contained within the result, or the result is instead an incremental\n * response containing a `path` property, a “No Content” error is thrown.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const makeResult = (\n  operation: Operation,\n  result: ExecutionResult,\n  response?: any\n): OperationResult => {\n  if (!('data' in result) && !('errors' in result)) {\n    throw new Error('No Content');\n  }\n\n  const defaultHasNext = operation.kind === 'subscription';\n  return {\n    operation,\n    data: result.data,\n    error: Array.isArray(result.errors)\n      ? new CombinedError({\n          graphQLErrors: result.errors,\n          response,\n        })\n      : undefined,\n    extensions: result.extensions ? { ...result.extensions } : undefined,\n    hasNext: result.hasNext == null ? defaultHasNext : result.hasNext,\n    stale: false,\n  };\n};\n\nconst deepMerge = (target: any, source: any) => {\n  if (typeof target === 'object' && target != null) {\n    if (\n      !target.constructor ||\n      target.constructor === Object ||\n      Array.isArray(target)\n    ) {\n      target = Array.isArray(target) ? [...target] : { ...target };\n      for (const key of Object.keys(source))\n        target[key] = deepMerge(target[key], source[key]);\n      return target;\n    }\n  }\n  return source;\n};\n\n/** Merges an incrementally delivered `ExecutionResult` into a previous `OperationResult`.\n *\n * @param prevResult - The {@link OperationResult} that preceded this result.\n * @param path - The GraphQL API’s {@link ExecutionResult} that should be patching the `prevResult`.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns A new {@link OperationResult} patched with the incremental result.\n *\n * @remarks\n * This utility should be used to merge subsequent {@link ExecutionResult | ExecutionResults} of\n * incremental responses into a prior {@link OperationResult}.\n *\n * When directives like `@defer`, `@stream`, and `@live` are used, GraphQL may deliver new\n * results that modify previous results. In these cases, it'll set a `path` property to modify\n * the result it sent last. This utility is built to handle these cases and merge these payloads\n * into existing {@link OperationResult | OperationResults}.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const mergeResultPatch = (\n  prevResult: OperationResult,\n  nextResult: ExecutionResult,\n  response?: any\n): OperationResult => {\n  let errors = prevResult.error ? prevResult.error.graphQLErrors : [];\n  let hasExtensions = !!prevResult.extensions || !!nextResult.extensions;\n  const extensions = { ...prevResult.extensions, ...nextResult.extensions };\n\n  let incremental = nextResult.incremental;\n\n  // NOTE: We handle the old version of the incremental delivery payloads as well\n  if ('path' in nextResult) {\n    incremental = [nextResult as IncrementalPayload];\n  }\n\n  const withData = { data: prevResult.data };\n  if (incremental) {\n    for (const patch of incremental) {\n      if (Array.isArray(patch.errors)) {\n        errors.push(...(patch.errors as any));\n      }\n\n      if (patch.extensions) {\n        Object.assign(extensions, patch.extensions);\n        hasExtensions = true;\n      }\n\n      let prop: string | number = 'data';\n      let part: Record<string, any> | Array<any> = withData;\n      for (let i = 0, l = patch.path.length; i < l; prop = patch.path[i++]) {\n        part = part[prop] = Array.isArray(part[prop])\n          ? [...part[prop]]\n          : { ...part[prop] };\n      }\n\n      if (patch.items) {\n        const startIndex = +prop >= 0 ? (prop as number) : 0;\n        for (let i = 0, l = patch.items.length; i < l; i++)\n          part[startIndex + i] = deepMerge(\n            part[startIndex + i],\n            patch.items[i]\n          );\n      } else if (patch.data !== undefined) {\n        part[prop] = deepMerge(part[prop], patch.data);\n      }\n    }\n  } else {\n    withData.data = nextResult.data || prevResult.data;\n    errors = (nextResult.errors as any[]) || errors;\n  }\n\n  return {\n    operation: prevResult.operation,\n    data: withData.data,\n    error: errors.length\n      ? new CombinedError({ graphQLErrors: errors, response })\n      : undefined,\n    extensions: hasExtensions ? extensions : undefined,\n    hasNext: !!nextResult.hasNext,\n    stale: false,\n  };\n};\n\n/** Creates an `OperationResult` containing a network error for requests that encountered unexpected errors.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param error - The network-like error that prevented an API result from being delivered.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult} containing only a {@link CombinedError}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n * This function should be used for when the {@link CombinedError.networkError} property is\n * populated and no GraphQL execution actually occurred.\n */\nexport const makeErrorResult = (\n  operation: Operation,\n  error: Error,\n  response?: any\n): OperationResult => ({\n  operation,\n  data: undefined,\n  error: new CombinedError({\n    networkError: error,\n    response,\n  }),\n  extensions: undefined,\n  hasNext: false,\n  stale: false,\n});\n","import {\n  stringifyDocument,\n  getOperationName,\n  stringifyVariables,\n  extractFiles,\n} from '../utils';\n\nimport { AnyVariables, GraphQLRequest, Operation } from '../types';\n\n/** Abstract definition of the JSON data sent during GraphQL HTTP POST requests. */\nexport interface FetchBody {\n  query?: string;\n  operationName: string | undefined;\n  variables: undefined | Record<string, any>;\n  extensions: undefined | Record<string, any>;\n}\n\n/** Creates a GraphQL over HTTP compliant JSON request body.\n * @param request - An object containing a `query` document and `variables`.\n * @returns A {@link FetchBody}\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n */\nexport function makeFetchBody<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(request: Omit<GraphQLRequest<Data, Variables>, 'key'>): FetchBody {\n  const isAPQ =\n    request.extensions &&\n    request.extensions.persistedQuery &&\n    !request.extensions.persistedQuery.miss;\n  return {\n    query: isAPQ ? undefined : stringifyDocument(request.query),\n    operationName: getOperationName(request.query),\n    variables: request.variables || undefined,\n    extensions: request.extensions,\n  };\n}\n\n/** Creates a URL that will be called for a GraphQL HTTP request.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which may be replaced with a URL.\n *\n * @remarks\n * Creates the URL that’ll be called as part of a GraphQL HTTP request.\n * Built-in fetch exchanges support sending GET requests, even for\n * non-persisted full requests, which this function supports by being\n * able to serialize GraphQL requests into the URL.\n */\nexport const makeFetchURL = (\n  operation: Operation,\n  body?: FetchBody\n): string => {\n  const useGETMethod =\n    operation.kind === 'query' && operation.context.preferGetMethod;\n  if (!useGETMethod || !body) return operation.context.url;\n\n  const url = new URL(operation.context.url);\n  for (const key in body) {\n    const value = body[key];\n    if (value) {\n      url.searchParams.set(\n        key,\n        typeof value === 'object' ? stringifyVariables(value) : value\n      );\n    }\n  }\n\n  const finalUrl = url.toString();\n  if (finalUrl.length > 2047 && useGETMethod !== 'force') {\n    operation.context.preferGetMethod = false;\n    return operation.context.url;\n  }\n\n  return finalUrl;\n};\n\n/** Serializes a {@link FetchBody} into a {@link RequestInit.body} format. */\nconst serializeBody = (\n  operation: Operation,\n  body?: FetchBody\n): FormData | string | undefined => {\n  const omitBody =\n    operation.kind === 'query' && !!operation.context.preferGetMethod;\n  if (body && !omitBody) {\n    const json = stringifyVariables(body);\n    const files = extractFiles(body.variables);\n    if (files.size) {\n      const form = new FormData();\n      form.append('operations', json);\n      form.append(\n        'map',\n        stringifyVariables({\n          ...[...files.keys()].map(value => [value]),\n        })\n      );\n      let index = 0;\n      for (const file of files.values()) form.append(`${index++}`, file);\n      return form;\n    }\n    return json;\n  }\n};\n\n/** Creates a `RequestInit` object for a given `Operation`.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which is added to the options, if the request isn’t a GET request.\n *\n * @remarks\n * Creates the fetch options {@link RequestInit} object that’ll be passed to the Fetch API\n * as part of a GraphQL over HTTP request. It automatically sets a default `Content-Type`\n * header.\n *\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport const makeFetchOptions = (\n  operation: Operation,\n  body?: FetchBody\n): RequestInit => {\n  const headers: HeadersInit = {\n    accept:\n      operation.kind === 'subscription'\n        ? 'text/event-stream, multipart/mixed'\n        : 'application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed',\n  };\n  const extraOptions =\n    (typeof operation.context.fetchOptions === 'function'\n      ? operation.context.fetchOptions()\n      : operation.context.fetchOptions) || {};\n  if (extraOptions.headers)\n    for (const key in extraOptions.headers)\n      headers[key.toLowerCase()] = extraOptions.headers[key];\n  const serializedBody = serializeBody(operation, body);\n  if (typeof serializedBody === 'string' && !headers['content-type'])\n    headers['content-type'] = 'application/json';\n  return {\n    ...extraOptions,\n    method: serializedBody ? 'POST' : 'GET',\n    body: serializedBody,\n    headers,\n  };\n};\n","import { Source, fromAsyncIterable, filter, pipe } from 'wonka';\nimport { Operation, OperationResult, ExecutionResult } from '../types';\nimport { makeResult, makeErrorResult, mergeResultPatch } from '../utils';\n\nconst decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder() : null;\nconst boundaryHeaderRe = /boundary=\"?([^=\";]+)\"?/i;\nconst eventStreamRe = /data: ?([^\\n]+)/;\n\ntype ChunkData = Buffer | Uint8Array;\n\n// NOTE: We're avoiding referencing the `Buffer` global here to prevent\n// auto-polyfilling in Webpack\nconst toString = (input: Buffer | ArrayBuffer): string =>\n  input.constructor.name === 'Buffer'\n    ? (input as Buffer).toString()\n    : decoder!.decode(input as ArrayBuffer);\n\nasync function* streamBody(response: Response): AsyncIterableIterator<string> {\n  if (response.body![Symbol.asyncIterator]) {\n    for await (const chunk of response.body! as any)\n      yield toString(chunk as ChunkData);\n  } else {\n    const reader = response.body!.getReader();\n    let result: ReadableStreamReadResult<ChunkData>;\n    try {\n      while (!(result = await reader.read()).done) yield toString(result.value);\n    } finally {\n      reader.cancel();\n    }\n  }\n}\n\nasync function* split(\n  chunks: AsyncIterableIterator<string>,\n  boundary: string\n): AsyncIterableIterator<string> {\n  let buffer = '';\n  let boundaryIndex: number;\n  for await (const chunk of chunks) {\n    buffer += chunk;\n    while ((boundaryIndex = buffer.indexOf(boundary)) > -1) {\n      yield buffer.slice(0, boundaryIndex);\n      buffer = buffer.slice(boundaryIndex + boundary.length);\n    }\n  }\n}\n\nasync function* parseJSON(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  yield JSON.parse(await response.text());\n}\n\nasync function* parseEventStream(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  let payload: any;\n  for await (const chunk of split(streamBody(response), '\\n\\n')) {\n    const match = chunk.match(eventStreamRe);\n    if (match) {\n      const chunk = match[1];\n      try {\n        yield (payload = JSON.parse(chunk));\n      } catch (error) {\n        if (!payload) throw error;\n      }\n      if (payload && !payload.hasNext) break;\n    }\n  }\n  if (payload && payload.hasNext) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* parseMultipartMixed(\n  contentType: string,\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  const boundaryHeader = contentType.match(boundaryHeaderRe);\n  const boundary = '--' + (boundaryHeader ? boundaryHeader[1] : '-');\n  let isPreamble = true;\n  let payload: any;\n  for await (const chunk of split(streamBody(response), boundary)) {\n    if (isPreamble) {\n      isPreamble = false;\n    } else {\n      try {\n        yield (payload = JSON.parse(\n          chunk.slice(chunk.indexOf('\\r\\n\\r\\n') + 4)\n        ));\n      } catch (error) {\n        if (!payload) throw error;\n      }\n    }\n    if (payload && !payload.hasNext) break;\n  }\n  if (payload && payload.hasNext) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* fetchOperation(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n) {\n  let networkMode = true;\n  let abortController: AbortController | void;\n  let result: OperationResult | null = null;\n  let response: Response;\n\n  try {\n    if (typeof AbortController !== 'undefined') {\n      fetchOptions.signal = (abortController = new AbortController()).signal;\n    }\n\n    // Delay for a tick to give the Client a chance to cancel the request\n    // if a teardown comes in immediately\n    yield await Promise.resolve();\n\n    response = await (operation.context.fetch || fetch)(url, fetchOptions);\n    const contentType = response.headers.get('Content-Type') || '';\n\n    let results: AsyncIterable<ExecutionResult>;\n    if (/multipart\\/mixed/i.test(contentType)) {\n      results = parseMultipartMixed(contentType, response);\n    } else if (/text\\/event-stream/i.test(contentType)) {\n      results = parseEventStream(response);\n    } else if (!/text\\//i.test(contentType)) {\n      results = parseJSON(response);\n    } else {\n      throw new Error(await response.text());\n    }\n\n    for await (const payload of results) {\n      result = result\n        ? mergeResultPatch(result, payload, response)\n        : makeResult(operation, payload, response);\n      networkMode = false;\n      yield result;\n      networkMode = true;\n    }\n\n    if (!result) {\n      yield (result = makeResult(operation, {}, response));\n    }\n  } catch (error: any) {\n    if (!networkMode) {\n      throw error;\n    }\n\n    yield makeErrorResult(\n      operation,\n      (response!.status < 200 || response!.status >= 300) &&\n        response!.statusText\n        ? new Error(response!.statusText)\n        : error,\n      response!\n    );\n  } finally {\n    if (abortController) abortController.abort();\n  }\n}\n\n/** Makes a GraphQL HTTP request to a given API by wrapping around the Fetch API.\n *\n * @param operation - The {@link Operation} that should be sent via GraphQL over HTTP.\n * @param url - The endpoint URL for the GraphQL HTTP API.\n * @param fetchOptions - The {@link RequestInit} fetch options for the request.\n * @returns A Wonka {@link Source} of {@link OperationResult | OperationResults}.\n *\n * @remarks\n * This utility defines how all built-in fetch exchanges make GraphQL HTTP requests,\n * supporting multipart incremental responses, cancellation and other smaller\n * implementation details.\n *\n * If you’re implementing a modified fetch exchange for a GraphQL over HTTP API\n * it’s recommended you use this utility.\n *\n * Hint: This function does not use the passed `operation` to create or modify the\n * `fetchOptions` and instead expects that the options have already been created\n * using {@link makeFetchOptions} and modified as needed.\n *\n * @throws\n * If the `fetch` polyfill or globally available `fetch` function doesn’t support\n * streamed multipart responses while trying to handle a `multipart/mixed` GraphQL response,\n * the source will throw “Streaming requests unsupported”.\n * This shouldn’t happen in modern browsers and Node.js.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport function makeFetchSource(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n): Source<OperationResult> {\n  return pipe(\n    fromAsyncIterable(fetchOperation(operation, url, fetchOptions)),\n    filter((result): result is OperationResult => !!result)\n  );\n}\n"],"names":["generateErrorMessage","networkErr","graphQlErrs","error","message","err","rehydrateGraphQlError","extensions","name","GraphQLError","nodes","source","positions","path","CombinedError","Error","constructor","input","normalizedGraphQLErrors","graphQLErrors","map","networkError","response","toString","phash","x","seed","h","i","l","length","charCodeAt","seen","Set","cache","WeakMap","stringify","has","JSON","toJSON","Array","isArray","out","value","keys","Object","sort","key","get","Math","random","slice","set","__key","add","delete","extract","FileConstructor","BlobConstructor","stringifyVariables","clear","NoopConstructor","File","Blob","extractFiles","Map","SOURCE_NAME","GRAPHQL_STRING_RE","REPLACE_CHAR_RE","replaceOutsideStrings","str","idx","replace","sanitizeDocument","node","split","join","trim","prints","docs","stringifyDocument","printed","loc","body","print","start","end","locationOffset","line","column","hashDocument","definitions","operationName","getOperationName","keyDocument","query","parse","noLocation","createRequest","_query","_variables","variables","printedVars","kind","Kind","OPERATION_DEFINITION","undefined","getOperationType","operation","makeResult","result","defaultHasNext","data","errors","hasNext","stale","deepMerge","target","mergeResultPatch","prevResult","nextResult","hasExtensions","incremental","withData","patch","push","assign","prop","part","items","startIndex","makeErrorResult","makeFetchBody","request","isAPQ","persistedQuery","miss","makeFetchURL","useGETMethod","context","preferGetMethod","url","URL","searchParams","finalUrl","serializeBody","omitBody","json","files","size","form","FormData","append","index","file","values","makeFetchOptions","headers","accept","extraOptions","fetchOptions","toLowerCase","serializedBody","method","decoder","TextDecoder","boundaryHeaderRe","eventStreamRe","decode","streamBody","Symbol","asyncIterator","chunk","reader","getReader","read","done","cancel","chunks","boundary","buffer","boundaryIndex","indexOf","parseJSON","text","parseEventStream","payload","match","parseMultipartMixed","contentType","boundaryHeader","isPreamble","fetchOperation","networkMode","abortController","AbortController","signal","Promise","resolve","fetch","results","test","status","statusText","abort","makeFetchSource","filter","fromAsyncIterable"],"mappings":"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"}